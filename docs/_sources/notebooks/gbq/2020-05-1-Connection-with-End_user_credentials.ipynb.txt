{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "# Getting started - connection with end-user-credentials \n",
    "\n",
    "* https://docs.dimensions.ai/bigquery/notebooks.html\n",
    "\n",
    "Also\n",
    "* https://googleapis.dev/python/bigquery/latest/index.html\n",
    "* https://googleapis.dev/python/bigquery/latest/usage/pandas.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "!pip install google-cloud-bigquery -U --quiet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/michele.pasin/Envs/jupyterlab/lib/python3.7/site-packages/google/auth/_default.py:69: UserWarning: Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a \"quota exceeded\" or \"API not enabled\" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/\n",
      "  warnings.warn(_CLOUD_SDK_CREDENTIALS_WARNING)\n"
     ]
    }
   ],
   "source": [
    "from google.cloud import bigquery\n",
    "import os\n",
    "os.environ[\"GCLOUD_PROJECT\"] = \"ds-data-solutions-gbq\"\n",
    "os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"/Users/michele.pasin/.config/gcloud/application_default_credentials.json\"\n",
    "client = bigquery.Client()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pub.1127239818 : 46 : 12412\n",
      "pub.1126016857 : 9 : 7569\n",
      "pub.1125492157 : 4 : 5320\n",
      "pub.1125987798 : 33 : 5260\n",
      "pub.1127448932 : 31 : 4106\n"
     ]
    }
   ],
   "source": [
    "query_job = client.query(\"\"\"\n",
    "  SELECT\n",
    "    id,\n",
    "    title,\n",
    "    ARRAY_LENGTH(author_affiliations) as authors,\n",
    "    CAST(altmetrics.score as INT64) as altmetric_score\n",
    "  FROM\n",
    "    `dimensions-ai.data_analytics.publications`\n",
    "  WHERE\n",
    "    year = 2020 AND 'grid.4991.5' in UNNEST(author_grid_ids)\n",
    "  ORDER BY\n",
    "    altmetrics.score desc\n",
    "  LIMIT 5\"\"\")\n",
    "\n",
    "results = query_job.result()  # Waits for job to complete.\n",
    "\n",
    "for row in results:\n",
    "  print(\"{} : {} : {}\".format(row.id, row.authors, row.altmetric_score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "query_1  = '''\n",
    "select count(id) as tot , count(doi) as dois , journal.id , journal.title\n",
    "from `dimensions-ai.data_analytics.publications`\n",
    "where journal.id is not null \n",
    "group by journal.id, journal.title\n",
    "order by tot desc\n",
    "limit 5\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Row((1704763, 0, 'jour.1371339', 'arXiv'), {'tot': 0, 'dois': 1, 'id': 2, 'title': 3})\n",
      "Row((791875, 791875, 'jour.1016355', 'ChemInform'), {'tot': 0, 'dois': 1, 'id': 2, 'title': 3})\n",
      "Row((452504, 445245, 'jour.1077219', 'The Lancet'), {'tot': 0, 'dois': 1, 'id': 2, 'title': 3})\n",
      "Row((429951, 420471, 'jour.1017377', 'The BMJ'), {'tot': 0, 'dois': 1, 'id': 2, 'title': 3})\n",
      "Row((416373, 415926, 'jour.1018957', 'Nature'), {'tot': 0, 'dois': 1, 'id': 2, 'title': 3})\n"
     ]
    }
   ],
   "source": [
    "# 1 - verbose way\n",
    "\n",
    "query_job = client.query(query_1)\n",
    "results = query_job.result()\n",
    "for row in results:\n",
    "    print(row)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Row((1704763, 0, 'jour.1371339', 'arXiv'), {'tot': 0, 'dois': 1, 'id': 2, 'title': 3})\n",
      "Row((791875, 791875, 'jour.1016355', 'ChemInform'), {'tot': 0, 'dois': 1, 'id': 2, 'title': 3})\n",
      "Row((452504, 445245, 'jour.1077219', 'The Lancet'), {'tot': 0, 'dois': 1, 'id': 2, 'title': 3})\n",
      "Row((429951, 420471, 'jour.1017377', 'The BMJ'), {'tot': 0, 'dois': 1, 'id': 2, 'title': 3})\n",
      "Row((416373, 415926, 'jour.1018957', 'Nature'), {'tot': 0, 'dois': 1, 'id': 2, 'title': 3})\n"
     ]
    }
   ],
   "source": [
    "# 2 - omit calling result()\n",
    "\n",
    "query_job = client.query(query_1)\n",
    "for row in query_job:\n",
    "    print(row) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tot</th>\n",
       "      <th>dois</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1704763</td>\n",
       "      <td>0</td>\n",
       "      <td>jour.1371339</td>\n",
       "      <td>arXiv</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>791875</td>\n",
       "      <td>791875</td>\n",
       "      <td>jour.1016355</td>\n",
       "      <td>ChemInform</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>452504</td>\n",
       "      <td>445245</td>\n",
       "      <td>jour.1077219</td>\n",
       "      <td>The Lancet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>429951</td>\n",
       "      <td>420471</td>\n",
       "      <td>jour.1017377</td>\n",
       "      <td>The BMJ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>416373</td>\n",
       "      <td>415926</td>\n",
       "      <td>jour.1018957</td>\n",
       "      <td>Nature</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       tot    dois            id       title\n",
       "0  1704763       0  jour.1371339       arXiv\n",
       "1   791875  791875  jour.1016355  ChemInform\n",
       "2   452504  445245  jour.1077219  The Lancet\n",
       "3   429951  420471  jour.1017377     The BMJ\n",
       "4   416373  415926  jour.1018957      Nature"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 3 - to dataframe\n",
    "\n",
    "query_job = client.query(query_1).to_dataframe()\n",
    "query_job"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## Testing shortcuts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "project_id = \"ds-data-solutions-gbq\"\n",
    "bq_params = {}\n",
    "bq_params[\"journal_id\"] = \"jour.1115214\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "%load_ext google.cloud.bigquery"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tot</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2639688</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       tot\n",
       "0  2639688"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%bigquery --params $bq_params --project $project_id \n",
    "SELECT count(*) as tot \n",
    "from `dimensions-ai.data_analytics.publications`\n",
    "where year = 2020\n",
    "# comment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
