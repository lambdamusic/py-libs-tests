{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "# Embedding HTML and dataviz in jupyter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 1006,
     "status": "ok",
     "timestamp": 1574246680444,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AAuE7mBu8LVjIGgontF2Wax51BoL5KFx8esezX3bUmaa0g=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": 0
    },
    "id": "LggU8Yk27apJ",
    "outputId": "3579c4e4-cce5-4db7-ba41-3b8878da50af"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<b>asdadasd</b>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%html\n",
    "<b>asdadasd</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 217
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 542,
     "status": "ok",
     "timestamp": 1574247159297,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AAuE7mBu8LVjIGgontF2Wax51BoL5KFx8esezX3bUmaa0g=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": 0
    },
    "id": "0zo4BDoDafBB",
    "outputId": "9f9923a4-5e06-4e02-9347-57c5ff0bd875"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "<!doctype html>\n",
       "<meta charset=\"utf-8\">\n",
       "\n",
       "<!-- load D3js -->\n",
       "<script src=\"//d3plus.org/js/d3.js\"></script>\n",
       "\n",
       "<!-- load D3plus after D3js -->\n",
       "<script src=\"//d3plus.org/js/d3plus.js\"></script>\n",
       "\n",
       "<!-- create container element for visualization -->\n",
       "<div id=\"viz\"></div>\n",
       "\n",
       "<script>\n",
       "\n",
       "  // create sample dataset\n",
       "  var sample_data = [\n",
       "    {\"name\": \"alpha\", \"size\": 10},\n",
       "    {\"name\": \"beta\", \"size\": 12},\n",
       "    {\"name\": \"gamma\", \"size\": 30},\n",
       "    {\"name\": \"delta\", \"size\": 26},\n",
       "    {\"name\": \"epsilon\", \"size\": 12},\n",
       "    {\"name\": \"zeta\", \"size\": 26},\n",
       "    {\"name\": \"theta\", \"size\": 11},\n",
       "    {\"name\": \"eta\", \"size\": 24}\n",
       "  ]\n",
       "\n",
       "  // create list of node positions\n",
       "  var positions = [\n",
       "    {\"name\": \"alpha\", \"x\": 10, \"y\": 15},\n",
       "    {\"name\": \"beta\", \"x\": 12, \"y\": 24},\n",
       "    {\"name\": \"gamma\", \"x\": 16, \"y\": 18},\n",
       "    {\"name\": \"delta\", \"x\": 26, \"y\": 21},\n",
       "    {\"name\": \"epsilon\", \"x\": 13, \"y\": 4},\n",
       "    {\"name\": \"zeta\", \"x\": 31, \"y\": 13},\n",
       "    {\"name\": \"theta\", \"x\": 19, \"y\": 8},\n",
       "    {\"name\": \"eta\", \"x\": 24, \"y\": 11}\n",
       "  ]\n",
       "\n",
       "  // create list of node connections\n",
       "  var connections = [\n",
       "    {\"source\": \"alpha\", \"target\": \"beta\"},\n",
       "    {\"source\": \"alpha\", \"target\": \"gamma\"},\n",
       "    {\"source\": \"beta\", \"target\": \"delta\"},\n",
       "    {\"source\": \"beta\", \"target\": \"epsilon\"},\n",
       "    {\"source\": \"zeta\", \"target\": \"gamma\"},\n",
       "    {\"source\": \"theta\", \"target\": \"gamma\"},\n",
       "    {\"source\": \"eta\", \"target\": \"gamma\"}\n",
       "  ]\n",
       "\n",
       "  // instantiate d3plus\n",
       "  var visualization = d3plus.viz()\n",
       "    .container(\"#viz\")  // container DIV to hold the visualization\n",
       "    .type(\"network\")    // visualization type\n",
       "    .data(sample_data)  // sample dataset to attach to nodes\n",
       "    .nodes(positions)   // x and y position of nodes\n",
       "    .edges(connections) // list of node connections\n",
       "    .size(\"size\")       // key to size the nodes\n",
       "    .id(\"name\")         // key for which our data is unique on\n",
       "    .draw()             // finally, draw the visualization!\n",
       "\n",
       "</script>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%html\n",
    "\n",
    "\n",
    "<!doctype html>\n",
    "<meta charset=\"utf-8\">\n",
    "\n",
    "<!-- load D3js -->\n",
    "<script src=\"//d3plus.org/js/d3.js\"></script>\n",
    "\n",
    "<!-- load D3plus after D3js -->\n",
    "<script src=\"//d3plus.org/js/d3plus.js\"></script>\n",
    "\n",
    "<!-- create container element for visualization -->\n",
    "<div id=\"viz\"></div>\n",
    "\n",
    "<script>\n",
    "\n",
    "  // create sample dataset\n",
    "  var sample_data = [\n",
    "    {\"name\": \"alpha\", \"size\": 10},\n",
    "    {\"name\": \"beta\", \"size\": 12},\n",
    "    {\"name\": \"gamma\", \"size\": 30},\n",
    "    {\"name\": \"delta\", \"size\": 26},\n",
    "    {\"name\": \"epsilon\", \"size\": 12},\n",
    "    {\"name\": \"zeta\", \"size\": 26},\n",
    "    {\"name\": \"theta\", \"size\": 11},\n",
    "    {\"name\": \"eta\", \"size\": 24}\n",
    "  ]\n",
    "\n",
    "  // create list of node positions\n",
    "  var positions = [\n",
    "    {\"name\": \"alpha\", \"x\": 10, \"y\": 15},\n",
    "    {\"name\": \"beta\", \"x\": 12, \"y\": 24},\n",
    "    {\"name\": \"gamma\", \"x\": 16, \"y\": 18},\n",
    "    {\"name\": \"delta\", \"x\": 26, \"y\": 21},\n",
    "    {\"name\": \"epsilon\", \"x\": 13, \"y\": 4},\n",
    "    {\"name\": \"zeta\", \"x\": 31, \"y\": 13},\n",
    "    {\"name\": \"theta\", \"x\": 19, \"y\": 8},\n",
    "    {\"name\": \"eta\", \"x\": 24, \"y\": 11}\n",
    "  ]\n",
    "\n",
    "  // create list of node connections\n",
    "  var connections = [\n",
    "    {\"source\": \"alpha\", \"target\": \"beta\"},\n",
    "    {\"source\": \"alpha\", \"target\": \"gamma\"},\n",
    "    {\"source\": \"beta\", \"target\": \"delta\"},\n",
    "    {\"source\": \"beta\", \"target\": \"epsilon\"},\n",
    "    {\"source\": \"zeta\", \"target\": \"gamma\"},\n",
    "    {\"source\": \"theta\", \"target\": \"gamma\"},\n",
    "    {\"source\": \"eta\", \"target\": \"gamma\"}\n",
    "  ]\n",
    "\n",
    "  // instantiate d3plus\n",
    "  var visualization = d3plus.viz()\n",
    "    .container(\"#viz\")  // container DIV to hold the visualization\n",
    "    .type(\"network\")    // visualization type\n",
    "    .data(sample_data)  // sample dataset to attach to nodes\n",
    "    .nodes(positions)   // x and y position of nodes\n",
    "    .edges(connections) // list of node connections\n",
    "    .size(\"size\")       // key to size the nodes\n",
    "    .id(\"name\")         // key for which our data is unique on\n",
    "    .draw()             // finally, draw the visualization!\n",
    "\n",
    "</script>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 597,
     "status": "ok",
     "timestamp": 1574248252516,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AAuE7mBu8LVjIGgontF2Wax51BoL5KFx8esezX3bUmaa0g=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": 0
    },
    "id": "nnX1HwRXbtzs",
    "outputId": "8769d664-58ac-4486-aba2-eae268876adc"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<!DOCTYPE html>\n",
       "<html>\n",
       "  <head>\n",
       "    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n",
       "    <script type=\"text/javascript\" src=\"https://d3js.org/d3.v3.min.js\"></script>\n",
       "  </head>\n",
       "  <body>\n",
       "\n",
       "\n",
       "    <div id=\"graph_div\"></div>\n",
       "\n",
       "<script>\n",
       "\n",
       "// based on http://bl.ocks.org/eyaler/10586116 \n",
       "\n",
       "var data_local_dynamic = {\n",
       "  \"graph\": [],\n",
       "  \"links\": [\n",
       "      \n",
       "          { \"source\": 60673, \"target\": 60667 },\n",
       "      \n",
       "          { \"source\": 60673, \"target\": 60648 },\n",
       "      \n",
       "          { \"source\": 60673, \"target\": 62339 },\n",
       "      \n",
       "          { \"source\": 60673, \"target\": 60671 },\n",
       "      \n",
       "          { \"source\": 60673, \"target\": 60721 },\n",
       "      \n",
       "          { \"source\": 60673, \"target\": 61318 },\n",
       "      \n",
       "          { \"source\": 60673, \"target\": 61108 },\n",
       "      \n",
       "          { \"source\": 60673, \"target\": 60653 },\n",
       "      \n",
       "          { \"source\": 60673, \"target\": 61852 },\n",
       "      \n",
       "          { \"source\": 60673, \"target\": 60759 },\n",
       "      \n",
       "          { \"source\": 60667, \"target\": 60673 },\n",
       "      \n",
       "          { \"source\": 60667, \"target\": 61108 },\n",
       "      \n",
       "          { \"source\": 60667, \"target\": 60648 },\n",
       "      \n",
       "          { \"source\": 60667, \"target\": 61322 },\n",
       "      \n",
       "          { \"source\": 60667, \"target\": 60671 },\n",
       "      \n",
       "          { \"source\": 60648, \"target\": 61318 },\n",
       "      \n",
       "          { \"source\": 60648, \"target\": 60673 },\n",
       "      \n",
       "          { \"source\": 60648, \"target\": 60650 },\n",
       "      \n",
       "          { \"source\": 60648, \"target\": 62013 },\n",
       "      \n",
       "          { \"source\": 60648, \"target\": 61322 },\n",
       "      \n",
       "          { \"source\": 62339, \"target\": 60673 },\n",
       "      \n",
       "          { \"source\": 62339, \"target\": 62372 },\n",
       "      \n",
       "          { \"source\": 62339, \"target\": 60671 },\n",
       "      \n",
       "          { \"source\": 62339, \"target\": 61108 },\n",
       "      \n",
       "          { \"source\": 62339, \"target\": 60648 },\n",
       "      \n",
       "          { \"source\": 60671, \"target\": 60759 },\n",
       "      \n",
       "          { \"source\": 60671, \"target\": 60905 },\n",
       "      \n",
       "          { \"source\": 60671, \"target\": 60673 },\n",
       "      \n",
       "          { \"source\": 60671, \"target\": 62339 },\n",
       "      \n",
       "          { \"source\": 60671, \"target\": 61850 },\n",
       "      \n",
       "          { \"source\": 60721, \"target\": 60759 },\n",
       "      \n",
       "          { \"source\": 60721, \"target\": 60905 },\n",
       "      \n",
       "          { \"source\": 60721, \"target\": 62013 },\n",
       "      \n",
       "          { \"source\": 60721, \"target\": 61143 },\n",
       "      \n",
       "          { \"source\": 60721, \"target\": 60911 },\n",
       "      \n",
       "          { \"source\": 61318, \"target\": 60648 },\n",
       "      \n",
       "          { \"source\": 61318, \"target\": 62013 },\n",
       "      \n",
       "          { \"source\": 61318, \"target\": 60653 },\n",
       "      \n",
       "          { \"source\": 61318, \"target\": 60650 },\n",
       "      \n",
       "          { \"source\": 61318, \"target\": 60721 },\n",
       "      \n",
       "          { \"source\": 61108, \"target\": 60672 },\n",
       "      \n",
       "          { \"source\": 61108, \"target\": 61629 },\n",
       "      \n",
       "          { \"source\": 61108, \"target\": 60667 },\n",
       "      \n",
       "          { \"source\": 61108, \"target\": 62339 },\n",
       "      \n",
       "          { \"source\": 61108, \"target\": 60921 },\n",
       "      \n",
       "          { \"source\": 60653, \"target\": 61318 },\n",
       "      \n",
       "          { \"source\": 60653, \"target\": 60648 },\n",
       "      \n",
       "          { \"source\": 60653, \"target\": 60673 },\n",
       "      \n",
       "          { \"source\": 60653, \"target\": 60721 },\n",
       "      \n",
       "          { \"source\": 60653, \"target\": 62013 },\n",
       "      \n",
       "          { \"source\": 61852, \"target\": 60673 },\n",
       "      \n",
       "          { \"source\": 61852, \"target\": 60720 },\n",
       "      \n",
       "          { \"source\": 61852, \"target\": 60667 },\n",
       "      \n",
       "          { \"source\": 61852, \"target\": 60721 },\n",
       "      \n",
       "          { \"source\": 61852, \"target\": 60759 },\n",
       "      \n",
       "          { \"source\": 60759, \"target\": 60905 },\n",
       "      \n",
       "          { \"source\": 60759, \"target\": 61961 },\n",
       "      \n",
       "          { \"source\": 60759, \"target\": 61045 },\n",
       "      \n",
       "          { \"source\": 60759, \"target\": 61260 },\n",
       "      \n",
       "          { \"source\": 60759, \"target\": 61143 },\n",
       "                \n",
       "    //{\"source\": 0, \"target\": 1},\n",
       "    ],\n",
       "  \"nodes\": [\n",
       "      \n",
       "\n",
       "        {\"id\": 60667, \"size\": 50, \"score\": 0 , \"title\": \"Body mass index\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 60648, \"size\": 50, \"score\": 0 , \"title\": \"Diabetes mellitus type 2\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 62339, \"size\": 50, \"score\": 0 , \"title\": \"Hypertension\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 60671, \"size\": 50, \"score\": 0 , \"title\": \"Syndrome\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 60721, \"size\": 50, \"score\": 0 , \"title\": \"Metabolism\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 61318, \"size\": 50, \"score\": 0 , \"title\": \"Insulin\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 61108, \"size\": 50, \"score\": 0 , \"title\": \"Logistic regression\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 60653, \"size\": 50, \"score\": 0 , \"title\": \"Insulin resistance\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 61852, \"size\": 50, \"score\": 0 , \"title\": \"Adipose tissue\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 60759, \"size\": 50, \"score\": 0 , \"title\": \"Gene\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 60673, \"size\": 70, \"score\": 0.5 , \"title\": \"Obesity\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 61322, \"size\": 5, \"score\": 0.4 , \"title\": \"Fasting\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 60650, \"size\": 5, \"score\": 0.4 , \"title\": \"Blood sugar\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 62013, \"size\": 5, \"score\": 0.4 , \"title\": \"Glucose\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 62372, \"size\": 5, \"score\": 0.4 , \"title\": \"Diabetes mellitus\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 60905, \"size\": 5, \"score\": 0.4 , \"title\": \"Protein\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 61850, \"size\": 5, \"score\": 0.4 , \"title\": \"Phenotype\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 61143, \"size\": 5, \"score\": 0.4 , \"title\": \"Acid\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 60911, \"size\": 5, \"score\": 0.4 , \"title\": \"Lipid\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 60672, \"size\": 5, \"score\": 0.4 , \"title\": \"Odds ratio\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 61629, \"size\": 5, \"score\": 0.4 , \"title\": \"Confidence interval\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 60921, \"size\": 5, \"score\": 0.4 , \"title\": \"Multivariate analysis\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 60720, \"size\": 5, \"score\": 0.4 , \"title\": \"Magnetic resonance imaging\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 61961, \"size\": 5, \"score\": 0.4 , \"title\": \"DNA\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 61045, \"size\": 5, \"score\": 0.4 , \"title\": \"Polymerase chain reaction\", \"type\": \"circle\"},\n",
       "\n",
       "      \n",
       "\n",
       "        {\"id\": 61260, \"size\": 5, \"score\": 0.4 , \"title\": \"Messenger RNA\", \"type\": \"circle\"},\n",
       "\n",
       "       \n",
       "\n",
       "    // {\"size\": 60, \"score\": 0, \"id\": \"Androsynth\", \"type\": \"circle\"},\n",
       "  ],\n",
       "    \"directed\": false,\n",
       "   \"multigraph\": false\n",
       "} \n",
       "\n",
       "var chartDiv = document.getElementById(\"graph_div\");\n",
       "// Extract the width and height that was computed by CSS.\n",
       "var divWidth = chartDiv.clientWidth;\n",
       "var divHeight = chartDiv.clientHeight;\n",
       "\n",
       "//var w = window.innerWidth;\n",
       "//var h = window.innerHeight;\n",
       "\n",
       "var keyc = true, keys = true, keyt = true, keyr = true, keyx = true, keyd = true, keyl = true, keym = true, keyh = true, key1 = true, key2 = true, key3 = true, key0 = true\n",
       "\n",
       "var focus_node = null, highlight_node = null;\n",
       "\n",
       "var text_center = false;\n",
       "var outline = false;\n",
       "\n",
       "var min_score = 0;\n",
       "var max_score = 1;\n",
       "\n",
       "var color = d3.scale.linear()\n",
       "  .domain([min_score, (min_score+max_score)/2, max_score])\n",
       "  .range([\"lime\", \"yellow\", \"red\"]);\n",
       "\n",
       "var highlight_color = \"blue\";\n",
       "var highlight_trans = 0.1;\n",
       "  \n",
       "var size = d3.scale.pow().exponent(1)\n",
       "  .domain([1,100])\n",
       "  .range([8,24]);\n",
       "\t\n",
       "var force = d3.layout.force()\n",
       "  .linkDistance(100)\n",
       "  .charge(-500) // was 800\n",
       "  .size([divWidth,divHeight]);\n",
       "\n",
       "var default_node_color = \"#ccc\";\n",
       "//var default_node_color = \"rgb(3,190,100)\";\n",
       "var default_link_color = \"#888\";\n",
       "var nominal_base_node_size = 8;\n",
       "var nominal_text_size = 10;\n",
       "var max_text_size = 24;\n",
       "var nominal_stroke = 1.5;\n",
       "var max_stroke = 4.5;\n",
       "var max_base_node_size = 36;\n",
       "var min_zoom = 0.1;\n",
       "var max_zoom = 7;\n",
       "// append to DOM\n",
       "var svg = d3.select(\"#graph_div\").append(\"svg\");\n",
       "var zoom = d3.behavior.zoom().scaleExtent([min_zoom,max_zoom])\n",
       "var g = svg.append(\"g\");\n",
       "//\n",
       "svg.style(\"cursor\",\"move\");\n",
       "\n",
       "// d3.json(\"graph.json\", function(error, graph) {\n",
       "\n",
       "    var graph = data_local_dynamic;\n",
       "\n",
       "    var linkedByIndex = {};\n",
       "    graph.links.forEach(function(d) {\n",
       "        linkedByIndex[d.source + \",\" + d.target] = true;\n",
       "    });\n",
       "\n",
       "    console.log(linkedByIndex);\n",
       "\n",
       "    function isConnected(a, b) {\n",
       "        return linkedByIndex[a.id + \",\" + b.id] || linkedByIndex[b.id + \",\" + a.id] || a.id == b.id;\n",
       "    }\n",
       "    // console.log( isConnected(graph.nodes[0], graph.nodes[1]));\n",
       "\n",
       "    function hasConnections(a) {\n",
       "        for (var property in linkedByIndex) {\n",
       "                s = property.split(\",\");\n",
       "                if ((s[0] == a.id || s[1] == a.id) && linkedByIndex[property]) \t\t\t\t\treturn true;\n",
       "        }\n",
       "    return false;\n",
       "    }\n",
       "\n",
       "    /* resolve node IDs (not optimized at all!)\n",
       "    http://bl.ocks.org/nitaku/7483341\n",
       "    */\n",
       "    _ref = graph.links;\n",
       "    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n",
       "      l = _ref[_i];\n",
       "      _ref2 = graph.nodes;\n",
       "      for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {\n",
       "        n = _ref2[_j];\n",
       "        if (l.source === n.id) {\n",
       "          l.source = n;\n",
       "          continue;\n",
       "        }\n",
       "        if (l.target === n.id) {\n",
       "          l.target = n;\n",
       "          continue;\n",
       "        }\n",
       "      }\n",
       "    }\n",
       "\n",
       "    force\n",
       "        .nodes(graph.nodes)\n",
       "        .links(graph.links)\n",
       "        .start();\n",
       "\n",
       "    var link = g.selectAll(\".link\")\n",
       "        .data(graph.links)\n",
       "        .enter().append(\"line\")\n",
       "        .attr(\"class\", \"link\")\n",
       "        .style(\"stroke-width\",nominal_stroke)\n",
       "        .style(\"stroke\", function(d) { \n",
       "        if (isNumber(d.score) && d.score>=0) return color(d.score);\n",
       "        else return default_link_color; })\n",
       "\n",
       "\n",
       "    var node = g.selectAll(\".node\")\n",
       "        .data(graph.nodes)\n",
       "        .enter().append(\"g\")\n",
       "        .attr(\"class\", \"node\")\n",
       "        \n",
       "        .call(force.drag)\n",
       "\n",
       " \n",
       "    //\n",
       "    // NEW: requery on a dbclick \n",
       "    //\n",
       "    node.on(\"dblclick\", function(d) { d3.event.stopPropagation();\n",
       "            window.location.href = \"/dbpedialinks/entities/\" + d.id;\n",
       "        });   \n",
       "\n",
       "\n",
       "        \n",
       "        var tocolor = \"fill\";\n",
       "        var towhite = \"stroke\";\n",
       "        if (outline) {\n",
       "            tocolor = \"stroke\"\n",
       "            towhite = \"fill\"\n",
       "        }\n",
       "            \n",
       "        \n",
       "        \n",
       "    var circle = node.append(\"path\")\n",
       "    .attr(\"d\", d3.svg.symbol()\n",
       "        .size(function(d) { return Math.PI*Math.pow(size(d.size)||nominal_base_node_size,2); })\n",
       "        .type(function(d) { return d.type; }))\n",
       "    \n",
       "        .style(tocolor, function(d) { \n",
       "        if (isNumber(d.score) && d.score>=0) return color(d.score);\n",
       "        else return default_node_color; })\n",
       "        //.attr(\"r\", function(d) { return size(d.size)||nominal_base_node_size; })\n",
       "        .style(\"stroke-width\", nominal_stroke)\n",
       "        .style(towhite, \"white\");\n",
       "        \n",
       "                    \n",
       "    var text = g.selectAll(\".text\")\n",
       "        .data(graph.nodes)\n",
       "        .enter().append(\"text\")\n",
       "        .attr(\"dy\", \".35em\")\n",
       "        .style(\"font-size\", nominal_text_size + \"px\")\n",
       "\n",
       "        if (text_center)\n",
       "        text.text(function(d) { return d.title; })\n",
       "        .style(\"text-anchor\", \"middle\");\n",
       "        else \n",
       "        text.attr(\"dx\", function(d) {return (size(d.size)||nominal_base_node_size);})\n",
       "        .text(function(d) { return '\\u2002'+d.title; });\n",
       "\n",
       "        node.on(\"mouseover\", function(d) {\n",
       "        set_highlight(d);\n",
       "        })\n",
       "    .on(\"mousedown\", function(d) { d3.event.stopPropagation();\n",
       "        focus_node = d;\n",
       "        set_focus(d)\n",
       "        if (highlight_node === null) set_highlight(d)\n",
       "        \n",
       "    }\t).on(\"mouseout\", function(d) {\n",
       "            exit_highlight();\n",
       "\n",
       "    }\t);\n",
       "\n",
       "            d3.select(window).on(\"mouseup\",  \n",
       "            function() {\n",
       "            if (focus_node!==null)\n",
       "            {\n",
       "                focus_node = null;\n",
       "                if (highlight_trans<1)\n",
       "                {\n",
       "        \n",
       "            circle.style(\"opacity\", 1);\n",
       "        text.style(\"opacity\", 1);\n",
       "        link.style(\"opacity\", 1);\n",
       "        }\n",
       "            }\n",
       "        \n",
       "        if (highlight_node === null) exit_highlight();\n",
       "            });\n",
       "\n",
       "    function exit_highlight()\n",
       "    {\n",
       "            highlight_node = null;\n",
       "        if (focus_node===null)\n",
       "        {\n",
       "            svg.style(\"cursor\",\"move\");\n",
       "            if (highlight_color!=\"white\")\n",
       "        {\n",
       "        circle.style(towhite, \"white\");\n",
       "        text.style(\"font-weight\", \"normal\");\n",
       "        link.style(\"stroke\", function(o) {return (isNumber(o.score) && o.score>=0)?color(o.score):default_link_color});\n",
       "    }\n",
       "                \n",
       "        }\n",
       "    }\n",
       "\n",
       "    function set_focus(d)\n",
       "    {\t\n",
       "    if (highlight_trans<1)  {\n",
       "        circle.style(\"opacity\", function(o) {\n",
       "                    return isConnected(d, o) ? 1 : highlight_trans;\n",
       "                });\n",
       "\n",
       "                text.style(\"opacity\", function(o) {\n",
       "                    return isConnected(d, o) ? 1 : highlight_trans;\n",
       "                });\n",
       "                \n",
       "                link.style(\"opacity\", function(o) {\n",
       "                    return o.source.id == d.id || o.target.id == d.id ? 1 : highlight_trans;\n",
       "                });\t\t\n",
       "        }\n",
       "    }\n",
       "\n",
       "\n",
       "    function set_highlight(d)\n",
       "    {\n",
       "        svg.style(\"cursor\",\"pointer\");\n",
       "        if (focus_node!==null) d = focus_node;\n",
       "        highlight_node = d;\n",
       "\n",
       "        if (highlight_color!=\"white\")\n",
       "        {\n",
       "            circle.style(towhite, function(o) {\n",
       "                    return isConnected(d, o) ? highlight_color : \"white\";});\n",
       "                text.style(\"font-weight\", function(o) {\n",
       "                    return isConnected(d, o) ? \"bold\" : \"normal\";});\n",
       "                link.style(\"stroke\", function(o) {\n",
       "                return o.source.id == d.id || o.target.id == d.id ? highlight_color : ((isNumber(o.score) && o.score>=0)?color(o.score):default_link_color);\n",
       "\n",
       "                });\n",
       "        }\n",
       "    }\n",
       "        \n",
       "        \n",
       "    zoom.on(\"zoom\", function() {\n",
       "    \n",
       "        var stroke = nominal_stroke;\n",
       "        if (nominal_stroke*zoom.scale()>max_stroke) stroke = max_stroke/zoom.scale();\n",
       "        link.style(\"stroke-width\",stroke);\n",
       "        circle.style(\"stroke-width\",stroke);\n",
       "        \n",
       "        var base_radius = nominal_base_node_size;\n",
       "        if (nominal_base_node_size*zoom.scale()>max_base_node_size) base_radius = max_base_node_size/zoom.scale();\n",
       "            circle.attr(\"d\", d3.svg.symbol()\n",
       "            .size(function(d) { return Math.PI*Math.pow(size(d.size)*base_radius/nominal_base_node_size||base_radius,2); })\n",
       "            .type(function(d) { return d.type; }))\n",
       "            \n",
       "        //circle.attr(\"r\", function(d) { return (size(d.size)*base_radius/nominal_base_node_size||base_radius); })\n",
       "        if (!text_center) text.attr(\"dx\", function(d) { return (size(d.size)*base_radius/nominal_base_node_size||base_radius); });\n",
       "        \n",
       "        var text_size = nominal_text_size;\n",
       "        if (nominal_text_size*zoom.scale()>max_text_size) text_size = max_text_size/zoom.scale();\n",
       "        text.style(\"font-size\",text_size + \"px\");\n",
       "\n",
       "        g.attr(\"transform\", \"translate(\" + d3.event.translate + \")scale(\" + d3.event.scale + \")\");\n",
       "        });\n",
       "        \n",
       "    svg.call(zoom);\t  \n",
       "    svg.attr(\"transform\",\"scale(1,1)\");\n",
       "        \n",
       "    resize();\n",
       "    //window.focus();\n",
       "    d3.select(window).on(\"resize\", resize).on(\"keydown\", keydown);\n",
       "        \n",
       "    force.on(\"tick\", function() {\n",
       "        \n",
       "        node.attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\n",
       "        text.attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\n",
       "    \n",
       "        link.attr(\"x1\", function(d) { return d.source.x; })\n",
       "        .attr(\"y1\", function(d) { return d.source.y; })\n",
       "        .attr(\"x2\", function(d) { return d.target.x; })\n",
       "        .attr(\"y2\", function(d) { return d.target.y; });\n",
       "            \n",
       "        node.attr(\"cx\", function(d) { return d.x; })\n",
       "        .attr(\"cy\", function(d) { return d.y; });\n",
       "        });\n",
       "    \n",
       "    function resize() {\n",
       "        var width = chartDiv.clientWidth, height = chartDiv.clientHeight;\n",
       "        svg.attr(\"width\", width).attr(\"height\", height);\n",
       "        \n",
       "        force.size([force.size()[0]+(width-divWidth)/zoom.scale(),force.size()[1]+(height-divHeight)/zoom.scale()]).resume();\n",
       "        w = width;\n",
       "        h = height;\n",
       "        }\n",
       "        \n",
       "        function keydown() {\n",
       "        if (d3.event.keyCode==32) {  force.stop();}\n",
       "        else if (d3.event.keyCode>=48 && d3.event.keyCode<=90 && !d3.event.ctrlKey && !d3.event.altKey && !d3.event.metaKey)\n",
       "        {\n",
       "    switch (String.fromCharCode(d3.event.keyCode)) {\n",
       "        case \"C\": keyc = !keyc; break;\n",
       "        case \"S\": keys = !keys; break;\n",
       "        case \"T\": keyt = !keyt; break;\n",
       "        case \"R\": keyr = !keyr; break;\n",
       "        case \"X\": keyx = !keyx; break;\n",
       "        case \"D\": keyd = !keyd; break;\n",
       "        case \"L\": keyl = !keyl; break;\n",
       "        case \"M\": keym = !keym; break;\n",
       "        case \"H\": keyh = !keyh; break;\n",
       "        case \"1\": key1 = !key1; break;\n",
       "        case \"2\": key2 = !key2; break;\n",
       "        case \"3\": key3 = !key3; break;\n",
       "        case \"0\": key0 = !key0; break;\n",
       "    }\n",
       "        \n",
       "    link.style(\"display\", function(d) {\n",
       "                    var flag  = vis_by_type(d.source.type)&&vis_by_type(d.target.type)&&vis_by_node_score(d.source.score)&&vis_by_node_score(d.target.score)&&vis_by_link_score(d.score);\n",
       "                    // console.log(d);\n",
       "                    linkedByIndex[d.source.id + \",\" + d.target.id] = flag; // IMPORTANT?\n",
       "                return flag?\"inline\":\"none\";});\n",
       "    node.style(\"display\", function(d) {\n",
       "                    return (key0||hasConnections(d))&&vis_by_type(d.type)&&vis_by_node_score(d.score)?\"inline\":\"none\";});\n",
       "    text.style(\"display\", function(d) {\n",
       "                    return (key0||hasConnections(d))&&vis_by_type(d.type)&&vis_by_node_score(d.score)?\"inline\":\"none\";});\n",
       "                    \n",
       "                    if (highlight_node !== null)\n",
       "                    {\n",
       "                        if ((key0||hasConnections(highlight_node))&&vis_by_type(highlight_node.type)&&vis_by_node_score(highlight_node.score)) { \n",
       "                        if (focus_node!==null) set_focus(focus_node);\n",
       "                        set_highlight(highlight_node);\n",
       "                        }\n",
       "                        else {exit_highlight();}\n",
       "                    }\n",
       "\n",
       "    }\t\n",
       "    }\n",
       " \n",
       "// });  // original d3.json ends here\n",
       "\n",
       "function vis_by_type(type)\n",
       "{\n",
       "\tswitch (type) {\n",
       "\t  case \"circle\": return keyc;\n",
       "\t  case \"square\": return keys;\n",
       "\t  case \"triangle-up\": return keyt;\n",
       "\t  case \"diamond\": return keyr;\n",
       "\t  case \"cross\": return keyx;\n",
       "\t  case \"triangle-down\": return keyd;\n",
       "\t  default: return true;\n",
       "}\n",
       "}\n",
       "function vis_by_node_score(score)\n",
       "{\n",
       "\tif (isNumber(score))\n",
       "\t{\n",
       "\tif (score>=0.666) return keyh;\n",
       "\telse if (score>=0.333) return keym;\n",
       "\telse if (score>=0) return keyl;\n",
       "\t}\n",
       "\treturn true;\n",
       "}\n",
       "\n",
       "function vis_by_link_score(score)\n",
       "{\n",
       "\tif (isNumber(score))\n",
       "\t{\n",
       "\tif (score>=0.666) return key3;\n",
       "\telse if (score>=0.333) return key2;\n",
       "\telse if (score>=0) return key1;\n",
       "}\n",
       "\treturn true;\n",
       "}\n",
       "\n",
       "function isNumber(n) {\n",
       "  return !isNaN(parseFloat(n)) && isFinite(n);\n",
       "}\t\n",
       "\n",
       "\n",
       "</script>\n",
       "\n",
       "  </body>\n",
       "</html>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%html\n",
    "<!DOCTYPE html>\n",
    "<html>\n",
    "  <head>\n",
    "    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n",
    "    <script type=\"text/javascript\" src=\"https://d3js.org/d3.v3.min.js\"></script>\n",
    "  </head>\n",
    "  <body>\n",
    "\n",
    "\n",
    "    <div id=\"graph_div\"></div>\n",
    "\n",
    "<script>\n",
    "\n",
    "// based on http://bl.ocks.org/eyaler/10586116 \n",
    "\n",
    "var data_local_dynamic = {\n",
    "  \"graph\": [],\n",
    "  \"links\": [\n",
    "      \n",
    "          { \"source\": 60673, \"target\": 60667 },\n",
    "      \n",
    "          { \"source\": 60673, \"target\": 60648 },\n",
    "      \n",
    "          { \"source\": 60673, \"target\": 62339 },\n",
    "      \n",
    "          { \"source\": 60673, \"target\": 60671 },\n",
    "      \n",
    "          { \"source\": 60673, \"target\": 60721 },\n",
    "      \n",
    "          { \"source\": 60673, \"target\": 61318 },\n",
    "      \n",
    "          { \"source\": 60673, \"target\": 61108 },\n",
    "      \n",
    "          { \"source\": 60673, \"target\": 60653 },\n",
    "      \n",
    "          { \"source\": 60673, \"target\": 61852 },\n",
    "      \n",
    "          { \"source\": 60673, \"target\": 60759 },\n",
    "      \n",
    "          { \"source\": 60667, \"target\": 60673 },\n",
    "      \n",
    "          { \"source\": 60667, \"target\": 61108 },\n",
    "      \n",
    "          { \"source\": 60667, \"target\": 60648 },\n",
    "      \n",
    "          { \"source\": 60667, \"target\": 61322 },\n",
    "      \n",
    "          { \"source\": 60667, \"target\": 60671 },\n",
    "      \n",
    "          { \"source\": 60648, \"target\": 61318 },\n",
    "      \n",
    "          { \"source\": 60648, \"target\": 60673 },\n",
    "      \n",
    "          { \"source\": 60648, \"target\": 60650 },\n",
    "      \n",
    "          { \"source\": 60648, \"target\": 62013 },\n",
    "      \n",
    "          { \"source\": 60648, \"target\": 61322 },\n",
    "      \n",
    "          { \"source\": 62339, \"target\": 60673 },\n",
    "      \n",
    "          { \"source\": 62339, \"target\": 62372 },\n",
    "      \n",
    "          { \"source\": 62339, \"target\": 60671 },\n",
    "      \n",
    "          { \"source\": 62339, \"target\": 61108 },\n",
    "      \n",
    "          { \"source\": 62339, \"target\": 60648 },\n",
    "      \n",
    "          { \"source\": 60671, \"target\": 60759 },\n",
    "      \n",
    "          { \"source\": 60671, \"target\": 60905 },\n",
    "      \n",
    "          { \"source\": 60671, \"target\": 60673 },\n",
    "      \n",
    "          { \"source\": 60671, \"target\": 62339 },\n",
    "      \n",
    "          { \"source\": 60671, \"target\": 61850 },\n",
    "      \n",
    "          { \"source\": 60721, \"target\": 60759 },\n",
    "      \n",
    "          { \"source\": 60721, \"target\": 60905 },\n",
    "      \n",
    "          { \"source\": 60721, \"target\": 62013 },\n",
    "      \n",
    "          { \"source\": 60721, \"target\": 61143 },\n",
    "      \n",
    "          { \"source\": 60721, \"target\": 60911 },\n",
    "      \n",
    "          { \"source\": 61318, \"target\": 60648 },\n",
    "      \n",
    "          { \"source\": 61318, \"target\": 62013 },\n",
    "      \n",
    "          { \"source\": 61318, \"target\": 60653 },\n",
    "      \n",
    "          { \"source\": 61318, \"target\": 60650 },\n",
    "      \n",
    "          { \"source\": 61318, \"target\": 60721 },\n",
    "      \n",
    "          { \"source\": 61108, \"target\": 60672 },\n",
    "      \n",
    "          { \"source\": 61108, \"target\": 61629 },\n",
    "      \n",
    "          { \"source\": 61108, \"target\": 60667 },\n",
    "      \n",
    "          { \"source\": 61108, \"target\": 62339 },\n",
    "      \n",
    "          { \"source\": 61108, \"target\": 60921 },\n",
    "      \n",
    "          { \"source\": 60653, \"target\": 61318 },\n",
    "      \n",
    "          { \"source\": 60653, \"target\": 60648 },\n",
    "      \n",
    "          { \"source\": 60653, \"target\": 60673 },\n",
    "      \n",
    "          { \"source\": 60653, \"target\": 60721 },\n",
    "      \n",
    "          { \"source\": 60653, \"target\": 62013 },\n",
    "      \n",
    "          { \"source\": 61852, \"target\": 60673 },\n",
    "      \n",
    "          { \"source\": 61852, \"target\": 60720 },\n",
    "      \n",
    "          { \"source\": 61852, \"target\": 60667 },\n",
    "      \n",
    "          { \"source\": 61852, \"target\": 60721 },\n",
    "      \n",
    "          { \"source\": 61852, \"target\": 60759 },\n",
    "      \n",
    "          { \"source\": 60759, \"target\": 60905 },\n",
    "      \n",
    "          { \"source\": 60759, \"target\": 61961 },\n",
    "      \n",
    "          { \"source\": 60759, \"target\": 61045 },\n",
    "      \n",
    "          { \"source\": 60759, \"target\": 61260 },\n",
    "      \n",
    "          { \"source\": 60759, \"target\": 61143 },\n",
    "                \n",
    "    //{\"source\": 0, \"target\": 1},\n",
    "    ],\n",
    "  \"nodes\": [\n",
    "      \n",
    "\n",
    "        {\"id\": 60667, \"size\": 50, \"score\": 0 , \"title\": \"Body mass index\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 60648, \"size\": 50, \"score\": 0 , \"title\": \"Diabetes mellitus type 2\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 62339, \"size\": 50, \"score\": 0 , \"title\": \"Hypertension\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 60671, \"size\": 50, \"score\": 0 , \"title\": \"Syndrome\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 60721, \"size\": 50, \"score\": 0 , \"title\": \"Metabolism\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 61318, \"size\": 50, \"score\": 0 , \"title\": \"Insulin\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 61108, \"size\": 50, \"score\": 0 , \"title\": \"Logistic regression\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 60653, \"size\": 50, \"score\": 0 , \"title\": \"Insulin resistance\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 61852, \"size\": 50, \"score\": 0 , \"title\": \"Adipose tissue\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 60759, \"size\": 50, \"score\": 0 , \"title\": \"Gene\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 60673, \"size\": 70, \"score\": 0.5 , \"title\": \"Obesity\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 61322, \"size\": 5, \"score\": 0.4 , \"title\": \"Fasting\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 60650, \"size\": 5, \"score\": 0.4 , \"title\": \"Blood sugar\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 62013, \"size\": 5, \"score\": 0.4 , \"title\": \"Glucose\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 62372, \"size\": 5, \"score\": 0.4 , \"title\": \"Diabetes mellitus\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 60905, \"size\": 5, \"score\": 0.4 , \"title\": \"Protein\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 61850, \"size\": 5, \"score\": 0.4 , \"title\": \"Phenotype\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 61143, \"size\": 5, \"score\": 0.4 , \"title\": \"Acid\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 60911, \"size\": 5, \"score\": 0.4 , \"title\": \"Lipid\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 60672, \"size\": 5, \"score\": 0.4 , \"title\": \"Odds ratio\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 61629, \"size\": 5, \"score\": 0.4 , \"title\": \"Confidence interval\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 60921, \"size\": 5, \"score\": 0.4 , \"title\": \"Multivariate analysis\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 60720, \"size\": 5, \"score\": 0.4 , \"title\": \"Magnetic resonance imaging\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 61961, \"size\": 5, \"score\": 0.4 , \"title\": \"DNA\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 61045, \"size\": 5, \"score\": 0.4 , \"title\": \"Polymerase chain reaction\", \"type\": \"circle\"},\n",
    "\n",
    "      \n",
    "\n",
    "        {\"id\": 61260, \"size\": 5, \"score\": 0.4 , \"title\": \"Messenger RNA\", \"type\": \"circle\"},\n",
    "\n",
    "       \n",
    "\n",
    "    // {\"size\": 60, \"score\": 0, \"id\": \"Androsynth\", \"type\": \"circle\"},\n",
    "  ],\n",
    "    \"directed\": false,\n",
    "   \"multigraph\": false\n",
    "} \n",
    "\n",
    "var chartDiv = document.getElementById(\"graph_div\");\n",
    "// Extract the width and height that was computed by CSS.\n",
    "var divWidth = chartDiv.clientWidth;\n",
    "var divHeight = chartDiv.clientHeight;\n",
    "\n",
    "//var w = window.innerWidth;\n",
    "//var h = window.innerHeight;\n",
    "\n",
    "var keyc = true, keys = true, keyt = true, keyr = true, keyx = true, keyd = true, keyl = true, keym = true, keyh = true, key1 = true, key2 = true, key3 = true, key0 = true\n",
    "\n",
    "var focus_node = null, highlight_node = null;\n",
    "\n",
    "var text_center = false;\n",
    "var outline = false;\n",
    "\n",
    "var min_score = 0;\n",
    "var max_score = 1;\n",
    "\n",
    "var color = d3.scale.linear()\n",
    "  .domain([min_score, (min_score+max_score)/2, max_score])\n",
    "  .range([\"lime\", \"yellow\", \"red\"]);\n",
    "\n",
    "var highlight_color = \"blue\";\n",
    "var highlight_trans = 0.1;\n",
    "  \n",
    "var size = d3.scale.pow().exponent(1)\n",
    "  .domain([1,100])\n",
    "  .range([8,24]);\n",
    "\t\n",
    "var force = d3.layout.force()\n",
    "  .linkDistance(100)\n",
    "  .charge(-500) // was 800\n",
    "  .size([divWidth,divHeight]);\n",
    "\n",
    "var default_node_color = \"#ccc\";\n",
    "//var default_node_color = \"rgb(3,190,100)\";\n",
    "var default_link_color = \"#888\";\n",
    "var nominal_base_node_size = 8;\n",
    "var nominal_text_size = 10;\n",
    "var max_text_size = 24;\n",
    "var nominal_stroke = 1.5;\n",
    "var max_stroke = 4.5;\n",
    "var max_base_node_size = 36;\n",
    "var min_zoom = 0.1;\n",
    "var max_zoom = 7;\n",
    "// append to DOM\n",
    "var svg = d3.select(\"#graph_div\").append(\"svg\");\n",
    "var zoom = d3.behavior.zoom().scaleExtent([min_zoom,max_zoom])\n",
    "var g = svg.append(\"g\");\n",
    "//\n",
    "svg.style(\"cursor\",\"move\");\n",
    "\n",
    "// d3.json(\"graph.json\", function(error, graph) {\n",
    "\n",
    "    var graph = data_local_dynamic;\n",
    "\n",
    "    var linkedByIndex = {};\n",
    "    graph.links.forEach(function(d) {\n",
    "        linkedByIndex[d.source + \",\" + d.target] = true;\n",
    "    });\n",
    "\n",
    "    console.log(linkedByIndex);\n",
    "\n",
    "    function isConnected(a, b) {\n",
    "        return linkedByIndex[a.id + \",\" + b.id] || linkedByIndex[b.id + \",\" + a.id] || a.id == b.id;\n",
    "    }\n",
    "    // console.log( isConnected(graph.nodes[0], graph.nodes[1]));\n",
    "\n",
    "    function hasConnections(a) {\n",
    "        for (var property in linkedByIndex) {\n",
    "                s = property.split(\",\");\n",
    "                if ((s[0] == a.id || s[1] == a.id) && linkedByIndex[property]) \t\t\t\t\treturn true;\n",
    "        }\n",
    "    return false;\n",
    "    }\n",
    "\n",
    "    /* resolve node IDs (not optimized at all!)\n",
    "    http://bl.ocks.org/nitaku/7483341\n",
    "    */\n",
    "    _ref = graph.links;\n",
    "    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n",
    "      l = _ref[_i];\n",
    "      _ref2 = graph.nodes;\n",
    "      for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {\n",
    "        n = _ref2[_j];\n",
    "        if (l.source === n.id) {\n",
    "          l.source = n;\n",
    "          continue;\n",
    "        }\n",
    "        if (l.target === n.id) {\n",
    "          l.target = n;\n",
    "          continue;\n",
    "        }\n",
    "      }\n",
    "    }\n",
    "\n",
    "    force\n",
    "        .nodes(graph.nodes)\n",
    "        .links(graph.links)\n",
    "        .start();\n",
    "\n",
    "    var link = g.selectAll(\".link\")\n",
    "        .data(graph.links)\n",
    "        .enter().append(\"line\")\n",
    "        .attr(\"class\", \"link\")\n",
    "        .style(\"stroke-width\",nominal_stroke)\n",
    "        .style(\"stroke\", function(d) { \n",
    "        if (isNumber(d.score) && d.score>=0) return color(d.score);\n",
    "        else return default_link_color; })\n",
    "\n",
    "\n",
    "    var node = g.selectAll(\".node\")\n",
    "        .data(graph.nodes)\n",
    "        .enter().append(\"g\")\n",
    "        .attr(\"class\", \"node\")\n",
    "        \n",
    "        .call(force.drag)\n",
    "\n",
    " \n",
    "    //\n",
    "    // NEW: requery on a dbclick \n",
    "    //\n",
    "    node.on(\"dblclick\", function(d) { d3.event.stopPropagation();\n",
    "            window.location.href = \"/dbpedialinks/entities/\" + d.id;\n",
    "        });   \n",
    "\n",
    "\n",
    "        \n",
    "        var tocolor = \"fill\";\n",
    "        var towhite = \"stroke\";\n",
    "        if (outline) {\n",
    "            tocolor = \"stroke\"\n",
    "            towhite = \"fill\"\n",
    "        }\n",
    "            \n",
    "        \n",
    "        \n",
    "    var circle = node.append(\"path\")\n",
    "    .attr(\"d\", d3.svg.symbol()\n",
    "        .size(function(d) { return Math.PI*Math.pow(size(d.size)||nominal_base_node_size,2); })\n",
    "        .type(function(d) { return d.type; }))\n",
    "    \n",
    "        .style(tocolor, function(d) { \n",
    "        if (isNumber(d.score) && d.score>=0) return color(d.score);\n",
    "        else return default_node_color; })\n",
    "        //.attr(\"r\", function(d) { return size(d.size)||nominal_base_node_size; })\n",
    "        .style(\"stroke-width\", nominal_stroke)\n",
    "        .style(towhite, \"white\");\n",
    "        \n",
    "                    \n",
    "    var text = g.selectAll(\".text\")\n",
    "        .data(graph.nodes)\n",
    "        .enter().append(\"text\")\n",
    "        .attr(\"dy\", \".35em\")\n",
    "        .style(\"font-size\", nominal_text_size + \"px\")\n",
    "\n",
    "        if (text_center)\n",
    "        text.text(function(d) { return d.title; })\n",
    "        .style(\"text-anchor\", \"middle\");\n",
    "        else \n",
    "        text.attr(\"dx\", function(d) {return (size(d.size)||nominal_base_node_size);})\n",
    "        .text(function(d) { return '\\u2002'+d.title; });\n",
    "\n",
    "        node.on(\"mouseover\", function(d) {\n",
    "        set_highlight(d);\n",
    "        })\n",
    "    .on(\"mousedown\", function(d) { d3.event.stopPropagation();\n",
    "        focus_node = d;\n",
    "        set_focus(d)\n",
    "        if (highlight_node === null) set_highlight(d)\n",
    "        \n",
    "    }\t).on(\"mouseout\", function(d) {\n",
    "            exit_highlight();\n",
    "\n",
    "    }\t);\n",
    "\n",
    "            d3.select(window).on(\"mouseup\",  \n",
    "            function() {\n",
    "            if (focus_node!==null)\n",
    "            {\n",
    "                focus_node = null;\n",
    "                if (highlight_trans<1)\n",
    "                {\n",
    "        \n",
    "            circle.style(\"opacity\", 1);\n",
    "        text.style(\"opacity\", 1);\n",
    "        link.style(\"opacity\", 1);\n",
    "        }\n",
    "            }\n",
    "        \n",
    "        if (highlight_node === null) exit_highlight();\n",
    "            });\n",
    "\n",
    "    function exit_highlight()\n",
    "    {\n",
    "            highlight_node = null;\n",
    "        if (focus_node===null)\n",
    "        {\n",
    "            svg.style(\"cursor\",\"move\");\n",
    "            if (highlight_color!=\"white\")\n",
    "        {\n",
    "        circle.style(towhite, \"white\");\n",
    "        text.style(\"font-weight\", \"normal\");\n",
    "        link.style(\"stroke\", function(o) {return (isNumber(o.score) && o.score>=0)?color(o.score):default_link_color});\n",
    "    }\n",
    "                \n",
    "        }\n",
    "    }\n",
    "\n",
    "    function set_focus(d)\n",
    "    {\t\n",
    "    if (highlight_trans<1)  {\n",
    "        circle.style(\"opacity\", function(o) {\n",
    "                    return isConnected(d, o) ? 1 : highlight_trans;\n",
    "                });\n",
    "\n",
    "                text.style(\"opacity\", function(o) {\n",
    "                    return isConnected(d, o) ? 1 : highlight_trans;\n",
    "                });\n",
    "                \n",
    "                link.style(\"opacity\", function(o) {\n",
    "                    return o.source.id == d.id || o.target.id == d.id ? 1 : highlight_trans;\n",
    "                });\t\t\n",
    "        }\n",
    "    }\n",
    "\n",
    "\n",
    "    function set_highlight(d)\n",
    "    {\n",
    "        svg.style(\"cursor\",\"pointer\");\n",
    "        if (focus_node!==null) d = focus_node;\n",
    "        highlight_node = d;\n",
    "\n",
    "        if (highlight_color!=\"white\")\n",
    "        {\n",
    "            circle.style(towhite, function(o) {\n",
    "                    return isConnected(d, o) ? highlight_color : \"white\";});\n",
    "                text.style(\"font-weight\", function(o) {\n",
    "                    return isConnected(d, o) ? \"bold\" : \"normal\";});\n",
    "                link.style(\"stroke\", function(o) {\n",
    "                return o.source.id == d.id || o.target.id == d.id ? highlight_color : ((isNumber(o.score) && o.score>=0)?color(o.score):default_link_color);\n",
    "\n",
    "                });\n",
    "        }\n",
    "    }\n",
    "        \n",
    "        \n",
    "    zoom.on(\"zoom\", function() {\n",
    "    \n",
    "        var stroke = nominal_stroke;\n",
    "        if (nominal_stroke*zoom.scale()>max_stroke) stroke = max_stroke/zoom.scale();\n",
    "        link.style(\"stroke-width\",stroke);\n",
    "        circle.style(\"stroke-width\",stroke);\n",
    "        \n",
    "        var base_radius = nominal_base_node_size;\n",
    "        if (nominal_base_node_size*zoom.scale()>max_base_node_size) base_radius = max_base_node_size/zoom.scale();\n",
    "            circle.attr(\"d\", d3.svg.symbol()\n",
    "            .size(function(d) { return Math.PI*Math.pow(size(d.size)*base_radius/nominal_base_node_size||base_radius,2); })\n",
    "            .type(function(d) { return d.type; }))\n",
    "            \n",
    "        //circle.attr(\"r\", function(d) { return (size(d.size)*base_radius/nominal_base_node_size||base_radius); })\n",
    "        if (!text_center) text.attr(\"dx\", function(d) { return (size(d.size)*base_radius/nominal_base_node_size||base_radius); });\n",
    "        \n",
    "        var text_size = nominal_text_size;\n",
    "        if (nominal_text_size*zoom.scale()>max_text_size) text_size = max_text_size/zoom.scale();\n",
    "        text.style(\"font-size\",text_size + \"px\");\n",
    "\n",
    "        g.attr(\"transform\", \"translate(\" + d3.event.translate + \")scale(\" + d3.event.scale + \")\");\n",
    "        });\n",
    "        \n",
    "    svg.call(zoom);\t  \n",
    "    svg.attr(\"transform\",\"scale(1,1)\");\n",
    "        \n",
    "    resize();\n",
    "    //window.focus();\n",
    "    d3.select(window).on(\"resize\", resize).on(\"keydown\", keydown);\n",
    "        \n",
    "    force.on(\"tick\", function() {\n",
    "        \n",
    "        node.attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\n",
    "        text.attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\n",
    "    \n",
    "        link.attr(\"x1\", function(d) { return d.source.x; })\n",
    "        .attr(\"y1\", function(d) { return d.source.y; })\n",
    "        .attr(\"x2\", function(d) { return d.target.x; })\n",
    "        .attr(\"y2\", function(d) { return d.target.y; });\n",
    "            \n",
    "        node.attr(\"cx\", function(d) { return d.x; })\n",
    "        .attr(\"cy\", function(d) { return d.y; });\n",
    "        });\n",
    "    \n",
    "    function resize() {\n",
    "        var width = chartDiv.clientWidth, height = chartDiv.clientHeight;\n",
    "        svg.attr(\"width\", width).attr(\"height\", height);\n",
    "        \n",
    "        force.size([force.size()[0]+(width-divWidth)/zoom.scale(),force.size()[1]+(height-divHeight)/zoom.scale()]).resume();\n",
    "        w = width;\n",
    "        h = height;\n",
    "        }\n",
    "        \n",
    "        function keydown() {\n",
    "        if (d3.event.keyCode==32) {  force.stop();}\n",
    "        else if (d3.event.keyCode>=48 && d3.event.keyCode<=90 && !d3.event.ctrlKey && !d3.event.altKey && !d3.event.metaKey)\n",
    "        {\n",
    "    switch (String.fromCharCode(d3.event.keyCode)) {\n",
    "        case \"C\": keyc = !keyc; break;\n",
    "        case \"S\": keys = !keys; break;\n",
    "        case \"T\": keyt = !keyt; break;\n",
    "        case \"R\": keyr = !keyr; break;\n",
    "        case \"X\": keyx = !keyx; break;\n",
    "        case \"D\": keyd = !keyd; break;\n",
    "        case \"L\": keyl = !keyl; break;\n",
    "        case \"M\": keym = !keym; break;\n",
    "        case \"H\": keyh = !keyh; break;\n",
    "        case \"1\": key1 = !key1; break;\n",
    "        case \"2\": key2 = !key2; break;\n",
    "        case \"3\": key3 = !key3; break;\n",
    "        case \"0\": key0 = !key0; break;\n",
    "    }\n",
    "        \n",
    "    link.style(\"display\", function(d) {\n",
    "                    var flag  = vis_by_type(d.source.type)&&vis_by_type(d.target.type)&&vis_by_node_score(d.source.score)&&vis_by_node_score(d.target.score)&&vis_by_link_score(d.score);\n",
    "                    // console.log(d);\n",
    "                    linkedByIndex[d.source.id + \",\" + d.target.id] = flag; // IMPORTANT?\n",
    "                return flag?\"inline\":\"none\";});\n",
    "    node.style(\"display\", function(d) {\n",
    "                    return (key0||hasConnections(d))&&vis_by_type(d.type)&&vis_by_node_score(d.score)?\"inline\":\"none\";});\n",
    "    text.style(\"display\", function(d) {\n",
    "                    return (key0||hasConnections(d))&&vis_by_type(d.type)&&vis_by_node_score(d.score)?\"inline\":\"none\";});\n",
    "                    \n",
    "                    if (highlight_node !== null)\n",
    "                    {\n",
    "                        if ((key0||hasConnections(highlight_node))&&vis_by_type(highlight_node.type)&&vis_by_node_score(highlight_node.score)) { \n",
    "                        if (focus_node!==null) set_focus(focus_node);\n",
    "                        set_highlight(highlight_node);\n",
    "                        }\n",
    "                        else {exit_highlight();}\n",
    "                    }\n",
    "\n",
    "    }\t\n",
    "    }\n",
    " \n",
    "// });  // original d3.json ends here\n",
    "\n",
    "function vis_by_type(type)\n",
    "{\n",
    "\tswitch (type) {\n",
    "\t  case \"circle\": return keyc;\n",
    "\t  case \"square\": return keys;\n",
    "\t  case \"triangle-up\": return keyt;\n",
    "\t  case \"diamond\": return keyr;\n",
    "\t  case \"cross\": return keyx;\n",
    "\t  case \"triangle-down\": return keyd;\n",
    "\t  default: return true;\n",
    "}\n",
    "}\n",
    "function vis_by_node_score(score)\n",
    "{\n",
    "\tif (isNumber(score))\n",
    "\t{\n",
    "\tif (score>=0.666) return keyh;\n",
    "\telse if (score>=0.333) return keym;\n",
    "\telse if (score>=0) return keyl;\n",
    "\t}\n",
    "\treturn true;\n",
    "}\n",
    "\n",
    "function vis_by_link_score(score)\n",
    "{\n",
    "\tif (isNumber(score))\n",
    "\t{\n",
    "\tif (score>=0.666) return key3;\n",
    "\telse if (score>=0.333) return key2;\n",
    "\telse if (score>=0) return key1;\n",
    "}\n",
    "\treturn true;\n",
    "}\n",
    "\n",
    "function isNumber(n) {\n",
    "  return !isNaN(parseFloat(n)) && isFinite(n);\n",
    "}\t\n",
    "\n",
    "\n",
    "</script>\n",
    "\n",
    "  </body>\n",
    "</html>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "Collapsed": "false",
    "colab": {},
    "colab_type": "code",
    "id": "cjHsr_7ydFen"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "scratch.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
