{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "AuCkj0Qwywjy"
   },
   "source": [
    "# QA of DSL Release v1.23 - Datasets\n",
    "The purpose of this notebook is to review and test the new Dataset model in 1.23\n",
    "\n",
    "Docs: https://docs.dimensions.ai/dsl/1.23.0-preview/\n",
    "\n",
    "Datasets schema: https://docs.google.com/spreadsheets/d/1u8DoAm7Wp4TqZHHXDu0JifR_sdX0SOy5Zt1MiEvVujY/edit?ts=5de79d3c#gid=948303411\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "dj3FxL-cbjrM"
   },
   "source": [
    "## Prerequisites\n",
    "\n",
    "Please install the latest versions of these libraries to run this notebook. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "Collapsed": "false",
    "cellView": "form",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 153
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 10861,
     "status": "ok",
     "timestamp": 1570722986241,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AAuE7mBu8LVjIGgontF2Wax51BoL5KFx8esezX3bUmaa0g=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "BLUcxPxVb1vl",
    "outputId": "182031e3-7618-4a76-f7ee-d89fe4a4a6c7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DimCli v0.6.4 - Succesfully connected to <https://integration.ds-metrics.com> (method: dsl.ini file)\n"
     ]
    }
   ],
   "source": [
    "#\n",
    "# load common libraries\n",
    "import pandas as pd\n",
    "from pandas.io.json import json_normalize\n",
    "\n",
    "import time\n",
    "import json\n",
    "from tqdm.notebook import tqdm as progress\n",
    "\n",
    "import plotly.express as px\n",
    "from plotly.offline import plot \n",
    "\n",
    "import dimcli\n",
    "from dimcli.shortcuts import *\n",
    "\n",
    "dimcli.login(instance=\"test\")\n",
    "dsl = dimcli.Dsl() \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "JcnVEdOAywj3"
   },
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "YBSdHL4Tywj4"
   },
   "source": [
    "## [DSL-319] New source: datasets\n",
    "\n",
    "https://uberresearch.atlassian.net/browse/DSL-319"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Returned Datasets: 20 (total = 1463507)\n"
     ]
    },
    {
     "data": {
      "application/json": {
       "_stats": {
        "total_count": 1463507
       },
       "datasets": [
        {
         "authors": [
          {
           "name": "Christopher Williams",
           "orcid": ""
          },
          {
           "name": "Philip Wilson",
           "orcid": ""
          },
          {
           "name": "Jill Morrison",
           "orcid": ""
          },
          {
           "name": "Alex McMahon",
           "orcid": ""
          },
          {
           "name": "Walker Andrew",
           "orcid": ""
          },
          {
           "name": "Lesley Allan",
           "orcid": ""
          },
          {
           "name": "Alex McConnachie",
           "orcid": ""
          },
          {
           "name": "Yvonne McNeill",
           "orcid": ""
          },
          {
           "name": "Louise Tansey",
           "orcid": ""
          }
         ],
         "id": "178841",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "public health and epidemiology",
          "Mental health",
          "Non-clinical medicine"
         ],
         "title": "Characteristics of study participants and non-participants.",
         "year": 2013
        },
        {
         "authors": [
          {
           "name": "Denis Soulet",
           "orcid": ""
          },
          {
           "name": "Alexandre Paré",
           "orcid": ""
          },
          {
           "name": "Julien Coste",
           "orcid": ""
          },
          {
           "name": "Steve Lacroix",
           "orcid": ""
          }
         ],
         "id": "115012",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "Two-Photon Intravital Microscopy",
          "Intrinsic Movement Artifacts",
          "scale bar overlay",
          "intensity",
          "movement",
          "projection",
          "image",
          "tool",
          "XY",
          "tissue",
          "precalculated reference frames",
          "macro",
          "motion artifacts",
          "vivo two-photon imaging"
         ],
         "title": "Automated Filtering of Intrinsic Movement Artifacts during Two-Photon Intravital Microscopy",
         "year": 2013
        },
        {
         "authors": [
          {
           "name": "Alessia Franceschini",
           "orcid": ""
          },
          {
           "name": "Sandra Vilotti",
           "orcid": ""
          },
          {
           "name": "Michel D. Ferrari",
           "orcid": ""
          },
          {
           "name": "Arn M. J. M. van den Maagdenberg",
           "orcid": ""
          },
          {
           "name": "Andrea Nistri",
           "orcid": ""
          },
          {
           "name": "Elsa Fabbretti",
           "orcid": ""
          }
         ],
         "id": "114893",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "levels",
          "macrophages",
          "inflammatory",
          "trigeminal",
          "ganglia",
          "familial",
          "hemiplegic",
          "migraine"
         ],
         "title": "TNFα Levels and Macrophages Expression Reflect an Inflammatory Potential of Trigeminal Ganglia in a Mouse Model of Familial Hemiplegic Migraine",
         "year": 2013
        },
        {
         "authors": [
          {
           "name": "Rui-Xue Leng",
           "orcid": ""
          },
          {
           "name": "Wei Wang",
           "orcid": ""
          },
          {
           "name": "Han Cen",
           "orcid": ""
          },
          {
           "name": "Mo Zhou",
           "orcid": ""
          },
          {
           "name": "Chen-Chen Feng",
           "orcid": ""
          },
          {
           "name": "Yan Zhu",
           "orcid": ""
          },
          {
           "name": "Xiao-Ke Yang",
           "orcid": ""
          },
          {
           "name": "Mei Yang",
           "orcid": ""
          },
          {
           "name": "Yu Zhai",
           "orcid": ""
          },
          {
           "name": "Bao-Zhu Li",
           "orcid": ""
          },
          {
           "name": "Xiao-Song Wang",
           "orcid": ""
          },
          {
           "name": "Rui Li",
           "orcid": ""
          },
          {
           "name": "Gui-Mei Chen",
           "orcid": ""
          },
          {
           "name": "Hong Chen",
           "orcid": ""
          },
          {
           "name": "Hai-Feng Pan",
           "orcid": ""
          },
          {
           "name": "Dong-Qing Ye",
           "orcid": ""
          }
         ],
         "id": "199403",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "gene-gene",
          "systemic",
          "lupus",
          "logistic"
         ],
         "title": "Interaction analysis of gene-gene involved in systemic lupus erythematosus, by logistic regression*.",
         "year": 2012
        },
        {
         "authors": [
          {
           "name": "Magda Roszczynska-Kurasinska",
           "orcid": ""
          },
          {
           "name": "Andrzej Nowak",
           "orcid": ""
          },
          {
           "name": "Daniel Kamieniarz",
           "orcid": ""
          },
          {
           "name": "Sorin Solomon",
           "orcid": ""
          },
          {
           "name": "Jørgen Vitting Andersen",
           "orcid": ""
          }
         ],
         "id": "199396",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "uses"
         ],
         "title": "Decision table showing an example of a strategy that uses m = 2 recent time steps.",
         "year": 2012
        },
        {
         "authors": [
          {
           "name": "Anne Jaerve",
           "orcid": ""
          },
          {
           "name": "Fabian Kruse",
           "orcid": ""
          },
          {
           "name": "Katharina Malik",
           "orcid": ""
          },
          {
           "name": "Hans-Peter Hartung",
           "orcid": ""
          },
          {
           "name": "Hans Werner Müller",
           "orcid": ""
          }
         ],
         "id": "199387",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "processes",
          "lesion-regulated",
          "genes",
          "aged"
         ],
         "title": "Enriched biological processes of significantly lesion-regulated genes in young and aged animals.",
         "year": 2012
        },
        {
         "authors": [
          {
           "name": "Theodore McCormack",
           "orcid": ""
          },
          {
           "name": "Oliver Frings",
           "orcid": ""
          },
          {
           "name": "Andrey Alexeyenko",
           "orcid": ""
          },
          {
           "name": "Erik L. L. Sonnhammer",
           "orcid": ""
          }
         ],
         "id": "173614",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "pathway",
          "associations",
          "63",
          "genes",
          "up-regulated",
          "prostate"
         ],
         "title": "KEGG pathway associations to a 63 gene signature of genes up-regulated in prostate cancer.",
         "year": 2013
        },
        {
         "authors": [
          {
           "name": "Dennis Görlich",
           "orcid": ""
          },
          {
           "name": "Peter Dittrich",
           "orcid": ""
          }
         ],
         "id": "173593",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "pairs"
         ],
         "title": "Code pairs in the gene translation model.",
         "year": 2013
        },
        {
         "authors": [
          {
           "name": "Algevis P. Wrench",
           "orcid": ""
          },
          {
           "name": "Christopher L. Gardner",
           "orcid": ""
          },
          {
           "name": "Claudio F. Gonzalez",
           "orcid": ""
          },
          {
           "name": "Graciela L. Lorca",
           "orcid": ""
          }
         ],
         "id": "173586",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "molecules",
          "thermal",
          "mgla",
          "sspa",
          "protein-protein"
         ],
         "title": "Effect of small molecules on the thermal stability of MglA or SspA and their effect on protein-protein interaction.",
         "year": 2013
        },
        {
         "authors": [
          {
           "name": "Dennis Görlich",
           "orcid": ""
          },
          {
           "name": "Peter Dittrich",
           "orcid": ""
          }
         ],
         "id": "173568",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "codes",
          "17"
         ],
         "title": "Molecular codes in the reaction network model of the 17 known genetic codes.",
         "year": 2013
        },
        {
         "authors": [
          {
           "name": "Algevis P. Wrench",
           "orcid": ""
          },
          {
           "name": "Christopher L. Gardner",
           "orcid": ""
          },
          {
           "name": "Claudio F. Gonzalez",
           "orcid": ""
          },
          {
           "name": "Graciela L. Lorca",
           "orcid": ""
          }
         ],
         "id": "173556",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "genetics and genomics",
          "microbiology",
          "molecular biology",
          "Computational biology",
          "Biochemistry"
         ],
         "title": "Oligonucleotides used in this study.",
         "year": 2013
        },
        {
         "authors": [
          {
           "name": "Tomokazu Fukuda",
           "orcid": ""
          },
          {
           "name": "Yasushi Kino",
           "orcid": ""
          },
          {
           "name": "Yasuyuki Abe",
           "orcid": ""
          },
          {
           "name": "Hideaki Yamashiro",
           "orcid": ""
          },
          {
           "name": "Yoshikazu Kuwahara",
           "orcid": ""
          },
          {
           "name": "Hidekazu Nihei",
           "orcid": ""
          },
          {
           "name": "Yosuke Sano",
           "orcid": ""
          },
          {
           "name": "Ayumi Irisawa",
           "orcid": ""
          },
          {
           "name": "Tsutomu Shimura",
           "orcid": ""
          },
          {
           "name": "Motoi Fukumoto",
           "orcid": ""
          },
          {
           "name": "Hisashi Shinoda",
           "orcid": ""
          },
          {
           "name": "Yuichi Obata",
           "orcid": ""
          },
          {
           "name": "Shin Saigusa",
           "orcid": ""
          },
          {
           "name": "Tsutomu Sekine",
           "orcid": ""
          },
          {
           "name": "Emiko Isogai",
           "orcid": ""
          },
          {
           "name": "Manabu Fukumoto",
           "orcid": ""
          }
         ],
         "id": "173555",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "organs",
          "peripheral"
         ],
         "title": "Activity concentration of 134Cs, 137Cs, 110mAg and 129mTe in cattle organs and peripheral blood.",
         "year": 2013
        },
        {
         "authors": [
          {
           "name": "Dennis Görlich",
           "orcid": ""
          },
          {
           "name": "Peter Dittrich",
           "orcid": ""
          }
         ],
         "id": "173546",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "semiotic",
          "systems"
         ],
         "title": "Overview of semiotic interpretation of the biological systems surveyed.",
         "year": 2013
        },
        {
         "authors": [
          {
           "name": "Andy Maloney",
           "orcid": "0000-0002-8981-4611"
          }
         ],
         "id": "97058",
         "keywords": [
          "microtubules",
          "microscopy",
          "kinesin-1",
          "heavy water",
          "gliding motility assay",
          "fluorescence"
         ],
         "title": "Gliding motility assay using 8mM D2O in solution. Replicate 1/3. ROI 12/15.",
         "year": 2012
        },
        {
         "authors": [
          {
           "name": "Jonathan T. Mall",
           "orcid": ""
          },
          {
           "name": "Candice C. Morey",
           "orcid": ""
          }
         ],
         "id": "114745",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "retrieval",
          "induced",
          "forgetting"
         ],
         "title": "High Working Memory Capacity Predicts Less Retrieval Induced Forgetting",
         "year": 2013
        },
        {
         "authors": [
          {
           "name": "Andy Maloney",
           "orcid": "0000-0002-8981-4611"
          }
         ],
         "id": "97074",
         "keywords": [
          "microtubules",
          "microscopy",
          "kinesin-1",
          "heavy water",
          "gliding motility assay",
          "fluorescence"
         ],
         "title": "Gliding motility assay using 8mM D2O in solution. Replicate 2/3. ROI 9/15.",
         "year": 2012
        },
        {
         "authors": [
          {
           "name": "Nelson Valdivia",
           "orcid": ""
          },
          {
           "name": "Andrés E. González",
           "orcid": ""
          },
          {
           "name": "Tatiana Manzur",
           "orcid": ""
          },
          {
           "name": "Bernardo R. Broitman",
           "orcid": ""
          }
         ],
         "id": "114708",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "mesoscale",
          "mechanisms",
          "contributing",
          "rocky",
          "communities"
         ],
         "title": "Mesoscale Variation of Mechanisms Contributing to Stability in Rocky Shore Communities",
         "year": 2013
        },
        {
         "authors": [
          {
           "name": "Sara Kesel",
           "orcid": ""
          },
          {
           "name": "Andreas Mader",
           "orcid": ""
          },
          {
           "name": "Carolin Höfler",
           "orcid": ""
          },
          {
           "name": "Thorsten Mascher",
           "orcid": ""
          },
          {
           "name": "Madeleine Leisner",
           "orcid": ""
          }
         ],
         "id": "114706",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "heterogeneous",
          "liafsr",
          "two-component",
          "peptide",
          "antibiotic",
          "bacitracin"
         ],
         "title": "Immediate and Heterogeneous Response of the LiaFSR Two-Component System of Bacillus subtilis to the Peptide Antibiotic Bacitracin",
         "year": 2013
        },
        {
         "authors": [
          {
           "name": "Miklós Bálint",
           "orcid": ""
          },
          {
           "name": "Peter Tiffin",
           "orcid": ""
          },
          {
           "name": "Björn Hallström",
           "orcid": ""
          },
          {
           "name": "Robert B. O’Hara",
           "orcid": ""
          },
          {
           "name": "Matthew S. Olson",
           "orcid": ""
          },
          {
           "name": "Johnathon D. Fankhauser",
           "orcid": ""
          },
          {
           "name": "Meike Piepenbring",
           "orcid": ""
          },
          {
           "name": "Imke Schmitt",
           "orcid": ""
          }
         ],
         "id": "114705",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "genotype",
          "shapes",
          "foliar",
          "fungal",
          "microbiome",
          "balsam",
          "poplar"
         ],
         "title": "Host Genotype Shapes the Foliar Fungal Microbiome of Balsam Poplar (Populus balsamifera)",
         "year": 2013
        },
        {
         "authors": [
          {
           "name": "Miranda W. Langendam",
           "orcid": ""
          },
          {
           "name": "Edine W. Tiemersma",
           "orcid": ""
          },
          {
           "name": "Marieke J. van der Werf",
           "orcid": ""
          },
          {
           "name": "Andreas Sandgren",
           "orcid": ""
          }
         ],
         "id": "114703",
         "journal": {
          "id": "jour.1037553",
          "title": "PLoS ONE"
         },
         "keywords": [
          "adverse",
          "events",
          "individuals",
          "mdr-tb",
          "contacts",
          "treated",
          "anti-tuberculosis",
          "drugs",
          "preventing",
          "systematic",
          "review"
         ],
         "title": "Adverse Events in Healthy Individuals and MDR-TB Contacts Treated with Anti-Tuberculosis Drugs Potentially Effective for Preventing Development of MDR-TB: A Systematic Review",
         "year": 2013
        }
       ]
      },
      "text/plain": [
       "<dimcli.Dataset object #4634564688. Records: 20/1463507>"
      ]
     },
     "execution_count": 2,
     "metadata": {
      "application/json": {
       "expanded": false,
       "root": "root"
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%dsl search datasets return datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "### Extract all fields and try out a query for each field"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['associated_grant_ids',\n",
       " 'associated_publication_id',\n",
       " 'authors',\n",
       " 'category_bra',\n",
       " 'category_for',\n",
       " 'category_hra',\n",
       " 'category_hrcs_hc',\n",
       " 'category_hrcs_rac',\n",
       " 'category_icrp_cso',\n",
       " 'category_icrp_ct',\n",
       " 'category_rcdc',\n",
       " 'date',\n",
       " 'date_created',\n",
       " 'date_embargo',\n",
       " 'date_inserted',\n",
       " 'date_modified',\n",
       " 'description',\n",
       " 'doi',\n",
       " 'figshare_url',\n",
       " 'funder_countries',\n",
       " 'funders',\n",
       " 'id',\n",
       " 'journal',\n",
       " 'keywords',\n",
       " 'language_desc',\n",
       " 'language_title',\n",
       " 'license',\n",
       " 'publication_ids',\n",
       " 'repository_id',\n",
       " 'research_org_cities',\n",
       " 'research_org_countries',\n",
       " 'research_org_states',\n",
       " 'research_orgs',\n",
       " 'researchers',\n",
       " 'title',\n",
       " 'year']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = dsl.query(\"\"\"describe source datasets\"\"\")\n",
    "fields = sorted([x for x in data.fields.keys()])\n",
    "fields"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: associated_grant_ids =====\n",
      "\n",
      "Returned Datasets: 10 (total = 350682)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>associated_grant_ids</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[grant.5148919]</td>\n",
       "      <td>178841</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[grant.2813348, grant.2930382]</td>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             associated_grant_ids      id  \\\n",
       "0                 [grant.5148919]  178841   \n",
       "1  [grant.2813348, grant.2930382]  115012   \n",
       "\n",
       "                                               title  \n",
       "0  Characteristics of study participants and non-...  \n",
       "1  Automated Filtering of Intrinsic Movement Arti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: associated_publication_id =====\n",
      "\n",
      "Returned Datasets: 10 (total = 939983)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>associated_publication_id</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>pub.1047177482</td>\n",
       "      <td>178841</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>pub.1033046018</td>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  associated_publication_id      id  \\\n",
       "0            pub.1047177482  178841   \n",
       "1            pub.1033046018  115012   \n",
       "\n",
       "                                               title  \n",
       "0  Characteristics of study participants and non-...  \n",
       "1  Automated Filtering of Intrinsic Movement Arti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: authors =====\n",
      "\n",
      "Returned Datasets: 10 (total = 1463507)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>authors</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[{'name': 'Christopher Williams', 'orcid': ''}...</td>\n",
       "      <td>178841</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[{'name': 'Denis Soulet', 'orcid': ''}, {'name...</td>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             authors      id  \\\n",
       "0  [{'name': 'Christopher Williams', 'orcid': ''}...  178841   \n",
       "1  [{'name': 'Denis Soulet', 'orcid': ''}, {'name...  115012   \n",
       "\n",
       "                                               title  \n",
       "0  Characteristics of study participants and non-...  \n",
       "1  Automated Filtering of Intrinsic Movement Arti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: category_bra =====\n",
      "\n",
      "Returned Datasets: 10 (total = 155622)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category_bra</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[{'id': '4000', 'name': 'Basic Science'}]</td>\n",
       "      <td>114893</td>\n",
       "      <td>TNFα Levels and Macrophages Expression Reflect...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[{'id': '4001', 'name': 'Clinical Medicine and...</td>\n",
       "      <td>114703</td>\n",
       "      <td>Adverse Events in Healthy Individuals and MDR-...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        category_bra      id  \\\n",
       "0          [{'id': '4000', 'name': 'Basic Science'}]  114893   \n",
       "1  [{'id': '4001', 'name': 'Clinical Medicine and...  114703   \n",
       "\n",
       "                                               title  \n",
       "0  TNFα Levels and Macrophages Expression Reflect...  \n",
       "1  Adverse Events in Healthy Individuals and MDR-...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: category_for =====\n",
      "\n",
      "Returned Datasets: 10 (total = 691643)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category_for</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[{'id': '2211', 'name': '11 Medical and Health...</td>\n",
       "      <td>178841</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[{'id': '2208', 'name': '08 Information and Co...</td>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        category_for      id  \\\n",
       "0  [{'id': '2211', 'name': '11 Medical and Health...  178841   \n",
       "1  [{'id': '2208', 'name': '08 Information and Co...  115012   \n",
       "\n",
       "                                               title  \n",
       "0  Characteristics of study participants and non-...  \n",
       "1  Automated Filtering of Intrinsic Movement Arti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: category_hra =====\n",
      "\n",
      "Returned Datasets: 10 (total = 162484)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category_hra</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[{'id': '3900', 'name': 'Biomedical'}]</td>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[{'id': '3900', 'name': 'Biomedical'}]</td>\n",
       "      <td>114893</td>\n",
       "      <td>TNFα Levels and Macrophages Expression Reflect...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             category_hra      id  \\\n",
       "0  [{'id': '3900', 'name': 'Biomedical'}]  115012   \n",
       "1  [{'id': '3900', 'name': 'Biomedical'}]  114893   \n",
       "\n",
       "                                               title  \n",
       "0  Automated Filtering of Intrinsic Movement Arti...  \n",
       "1  TNFα Levels and Macrophages Expression Reflect...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: category_hrcs_hc =====\n",
      "\n",
      "Returned Datasets: 10 (total = 179747)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category_hrcs_hc</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[{'id': '911', 'name': 'Cancer'}]</td>\n",
       "      <td>173614</td>\n",
       "      <td>KEGG pathway associations to a 63 gene signatu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[{'id': '898', 'name': 'Infection'}]</td>\n",
       "      <td>114705</td>\n",
       "      <td>Host Genotype Shapes the Foliar Fungal Microbi...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       category_hrcs_hc      id  \\\n",
       "0     [{'id': '911', 'name': 'Cancer'}]  173614   \n",
       "1  [{'id': '898', 'name': 'Infection'}]  114705   \n",
       "\n",
       "                                               title  \n",
       "0  KEGG pathway associations to a 63 gene signatu...  \n",
       "1  Host Genotype Shapes the Foliar Fungal Microbi...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: category_hrcs_rac =====\n",
      "\n",
      "Returned Datasets: 10 (total = 119088)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category_hrcs_rac</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[{'id': '10200', 'name': '2 Aetiology'}]</td>\n",
       "      <td>114893</td>\n",
       "      <td>TNFα Levels and Macrophages Expression Reflect...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[{'id': '10200', 'name': '2 Aetiology'}]</td>\n",
       "      <td>173614</td>\n",
       "      <td>KEGG pathway associations to a 63 gene signatu...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          category_hrcs_rac      id  \\\n",
       "0  [{'id': '10200', 'name': '2 Aetiology'}]  114893   \n",
       "1  [{'id': '10200', 'name': '2 Aetiology'}]  173614   \n",
       "\n",
       "                                               title  \n",
       "0  TNFα Levels and Macrophages Expression Reflect...  \n",
       "1  KEGG pathway associations to a 63 gene signatu...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: category_icrp_cso =====\n",
      "\n",
      "Returned Datasets: 10 (total = 159761)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category_icrp_cso</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[{'id': '3761', 'name': '4.1 Technology Develo...</td>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[{'id': '3761', 'name': '4.1 Technology Develo...</td>\n",
       "      <td>97074</td>\n",
       "      <td>Gliding motility assay using 8mM D2O in soluti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   category_icrp_cso      id  \\\n",
       "0  [{'id': '3761', 'name': '4.1 Technology Develo...  115012   \n",
       "1  [{'id': '3761', 'name': '4.1 Technology Develo...   97074   \n",
       "\n",
       "                                               title  \n",
       "0  Automated Filtering of Intrinsic Movement Arti...  \n",
       "1  Gliding motility assay using 8mM D2O in soluti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: category_icrp_ct =====\n",
      "\n",
      "Returned Datasets: 10 (total = 65032)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category_icrp_ct</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[{'id': '3826', 'name': 'Prostate Cancer'}]</td>\n",
       "      <td>173614</td>\n",
       "      <td>KEGG pathway associations to a 63 gene signatu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[{'id': '3816', 'name': 'Not Site-Specific Can...</td>\n",
       "      <td>114687</td>\n",
       "      <td>Duplication and Diversification of the Spermid...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    category_icrp_ct      id  \\\n",
       "0        [{'id': '3826', 'name': 'Prostate Cancer'}]  173614   \n",
       "1  [{'id': '3816', 'name': 'Not Site-Specific Can...  114687   \n",
       "\n",
       "                                               title  \n",
       "0  KEGG pathway associations to a 63 gene signatu...  \n",
       "1  Duplication and Diversification of the Spermid...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: category_rcdc =====\n",
      "\n",
      "Returned Datasets: 10 (total = 331613)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category_rcdc</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[{'id': '387', 'name': 'Neurosciences'}]</td>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[{'id': '397', 'name': 'Pain Research'}, {'id'...</td>\n",
       "      <td>114893</td>\n",
       "      <td>TNFα Levels and Macrophages Expression Reflect...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                       category_rcdc      id  \\\n",
       "0           [{'id': '387', 'name': 'Neurosciences'}]  115012   \n",
       "1  [{'id': '397', 'name': 'Pain Research'}, {'id'...  114893   \n",
       "\n",
       "                                               title  \n",
       "0  Automated Filtering of Intrinsic Movement Arti...  \n",
       "1  TNFα Levels and Macrophages Expression Reflect...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: date =====\n",
      "\n",
      "Returned Datasets: 10 (total = 1463507)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2013-01-11</td>\n",
       "      <td>178841</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2013-01-11</td>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date      id                                              title\n",
       "0  2013-01-11  178841  Characteristics of study participants and non-...\n",
       "1  2013-01-11  115012  Automated Filtering of Intrinsic Movement Arti..."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: date_created =====\n",
      "\n",
      "Returned Datasets: 10 (total = 1463507)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_created</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2013-01-11</td>\n",
       "      <td>178841</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2013-01-11</td>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  date_created      id                                              title\n",
       "0   2013-01-11  178841  Characteristics of study participants and non-...\n",
       "1   2013-01-11  115012  Automated Filtering of Intrinsic Movement Arti..."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: date_embargo =====\n",
      "\n",
      "Returned Datasets: 10 (total = 6964)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_embargo</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-12-30</td>\n",
       "      <td>10675148</td>\n",
       "      <td>Table S1 from The unity and diversity of the c...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-12-04</td>\n",
       "      <td>10659665</td>\n",
       "      <td>Table S1 from Behavioural analysis of single-c...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  date_embargo        id                                              title\n",
       "0   2019-12-30  10675148  Table S1 from The unity and diversity of the c...\n",
       "1   2019-12-04  10659665  Table S1 from Behavioural analysis of single-c..."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: date_inserted =====\n",
      "\n",
      "Returned Datasets: 10 (total = 1463507)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_inserted</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2013-01-11</td>\n",
       "      <td>178841</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2013-01-11</td>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  date_inserted      id                                              title\n",
       "0    2013-01-11  178841  Characteristics of study participants and non-...\n",
       "1    2013-01-11  115012  Automated Filtering of Intrinsic Movement Arti..."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: date_modified =====\n",
      "\n",
      "Returned Datasets: 10 (total = 1463450)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_modified</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-12-02</td>\n",
       "      <td>178841</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2016-10-31</td>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  date_modified      id                                              title\n",
       "0    2015-12-02  178841  Characteristics of study participants and non-...\n",
       "1    2016-10-31  115012  Automated Filtering of Intrinsic Movement Arti..."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: description =====\n",
      "\n",
      "Returned Datasets: 10 (total = 1463495)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>aCarstairs Depcat [16], [17]: 1–7: 1 = most af...</td>\n",
       "      <td>178841</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>In vivo imaging using two-photon microscopy is...</td>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         description      id  \\\n",
       "0  aCarstairs Depcat [16], [17]: 1–7: 1 = most af...  178841   \n",
       "1  In vivo imaging using two-photon microscopy is...  115012   \n",
       "\n",
       "                                               title  \n",
       "0  Characteristics of study participants and non-...  \n",
       "1  Automated Filtering of Intrinsic Movement Arti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: doi =====\n",
      "\n",
      "Returned Datasets: 10 (total = 1462787)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>doi</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10.1371/journal.pone.0052735.t001</td>\n",
       "      <td>178841</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.1371/journal.pone.0053942</td>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 doi      id  \\\n",
       "0  10.1371/journal.pone.0052735.t001  178841   \n",
       "1       10.1371/journal.pone.0053942  115012   \n",
       "\n",
       "                                               title  \n",
       "0  Characteristics of study participants and non-...  \n",
       "1  Automated Filtering of Intrinsic Movement Arti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: figshare_url =====\n",
      "\n",
      "Returned Datasets: 10 (total = 1463507)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>figshare_url</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>https://figshare.com/articles/_Characteristics...</td>\n",
       "      <td>178841</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>https://figshare.com/articles/Automated_Filter...</td>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        figshare_url      id  \\\n",
       "0  https://figshare.com/articles/_Characteristics...  178841   \n",
       "1  https://figshare.com/articles/Automated_Filter...  115012   \n",
       "\n",
       "                                               title  \n",
       "0  Characteristics of study participants and non-...  \n",
       "1  Automated Filtering of Intrinsic Movement Arti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: funder_countries =====\n",
      "\n",
      "Returned Datasets: 10 (total = 564719)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>funder_countries</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[{'id': 'GB', 'name': 'United Kingdom'}]</td>\n",
       "      <td>178841</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[{'id': 'CA', 'name': 'Canada'}, {'id': 'CA', ...</td>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    funder_countries      id  \\\n",
       "0           [{'id': 'GB', 'name': 'United Kingdom'}]  178841   \n",
       "1  [{'id': 'CA', 'name': 'Canada'}, {'id': 'CA', ...  115012   \n",
       "\n",
       "                                               title  \n",
       "0  Characteristics of study participants and non-...  \n",
       "1  Automated Filtering of Intrinsic Movement Arti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: funders =====\n",
      "\n",
      "Returned Datasets: 10 (total = 564719)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>funders</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[{'id': 'grid.450637.3', 'country_name': 'Unit...</td>\n",
       "      <td>178841</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[{'id': 'grid.439998.6', 'country_name': 'Cana...</td>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             funders      id  \\\n",
       "0  [{'id': 'grid.450637.3', 'country_name': 'Unit...  178841   \n",
       "1  [{'id': 'grid.439998.6', 'country_name': 'Cana...  115012   \n",
       "\n",
       "                                               title  \n",
       "0  Characteristics of study participants and non-...  \n",
       "1  Automated Filtering of Intrinsic Movement Arti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: id =====\n",
      "\n",
      "Returned Datasets: 10 (total = 1463507)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>178841</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id                                              title\n",
       "0  178841  Characteristics of study participants and non-...\n",
       "1  115012  Automated Filtering of Intrinsic Movement Arti..."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: journal =====\n",
      "\n",
      "Returned Datasets: 10 (total = 939833)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>journal.id</th>\n",
       "      <th>journal.title</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>178841</td>\n",
       "      <td>jour.1037553</td>\n",
       "      <td>PLoS ONE</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>115012</td>\n",
       "      <td>jour.1037553</td>\n",
       "      <td>PLoS ONE</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id    journal.id journal.title  \\\n",
       "0  178841  jour.1037553      PLoS ONE   \n",
       "1  115012  jour.1037553      PLoS ONE   \n",
       "\n",
       "                                               title  \n",
       "0  Characteristics of study participants and non-...  \n",
       "1  Automated Filtering of Intrinsic Movement Arti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: keywords =====\n",
      "\n",
      "Returned Datasets: 10 (total = 1461780)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>keywords</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>178841</td>\n",
       "      <td>[public health and epidemiology, Mental health...</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>115012</td>\n",
       "      <td>[Two-Photon Intravital Microscopy, Intrinsic M...</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id                                           keywords  \\\n",
       "0  178841  [public health and epidemiology, Mental health...   \n",
       "1  115012  [Two-Photon Intravital Microscopy, Intrinsic M...   \n",
       "\n",
       "                                               title  \n",
       "0  Characteristics of study participants and non-...  \n",
       "1  Automated Filtering of Intrinsic Movement Arti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: language_desc =====\n",
      "\n",
      "Returned Datasets: 10 (total = 1463482)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>language_desc</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>178841</td>\n",
       "      <td>en</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>115012</td>\n",
       "      <td>en</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id language_desc                                              title\n",
       "0  178841            en  Characteristics of study participants and non-...\n",
       "1  115012            en  Automated Filtering of Intrinsic Movement Arti..."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: language_title =====\n",
      "\n",
      "Returned Datasets: 10 (total = 1463482)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>language_title</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>178841</td>\n",
       "      <td>en</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>115012</td>\n",
       "      <td>en</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id language_title                                              title\n",
       "0  178841             en  Characteristics of study participants and non-...\n",
       "1  115012             en  Automated Filtering of Intrinsic Movement Arti..."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: license =====\n",
      "\n",
      "Returned Datasets: 10 (total = 1463507)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>license.name</th>\n",
       "      <th>license.url</th>\n",
       "      <th>license.value</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>178841</td>\n",
       "      <td>CC BY 4.0</td>\n",
       "      <td>https://creativecommons.org/licenses/by/4.0/</td>\n",
       "      <td>1</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>115012</td>\n",
       "      <td>CC BY 4.0</td>\n",
       "      <td>https://creativecommons.org/licenses/by/4.0/</td>\n",
       "      <td>1</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id license.name                                   license.url  \\\n",
       "0  178841    CC BY 4.0  https://creativecommons.org/licenses/by/4.0/   \n",
       "1  115012    CC BY 4.0  https://creativecommons.org/licenses/by/4.0/   \n",
       "\n",
       "   license.value                                              title  \n",
       "0              1  Characteristics of study participants and non-...  \n",
       "1              1  Automated Filtering of Intrinsic Movement Arti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: publication_ids =====\n",
      "\n",
      "Returned Datasets: 10 (total = 44048)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>publication_ids</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10698473</td>\n",
       "      <td>[pub.1018030869]</td>\n",
       "      <td>(Table 5) Stable carbon and oxygen isotope rat...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10698470</td>\n",
       "      <td>[pub.1018030869]</td>\n",
       "      <td>(Table 5) Stable carbon and oxygen isotope rat...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id   publication_ids  \\\n",
       "0  10698473  [pub.1018030869]   \n",
       "1  10698470  [pub.1018030869]   \n",
       "\n",
       "                                               title  \n",
       "0  (Table 5) Stable carbon and oxygen isotope rat...  \n",
       "1  (Table 5) Stable carbon and oxygen isotope rat...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: repository_id =====\n",
      "\n",
      "Returned Datasets: 10 (total = 1463505)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>repository_id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>178841</td>\n",
       "      <td>public-library-of-science</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>115012</td>\n",
       "      <td>public-library-of-science</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id              repository_id  \\\n",
       "0  178841  public-library-of-science   \n",
       "1  115012  public-library-of-science   \n",
       "\n",
       "                                               title  \n",
       "0  Characteristics of study participants and non-...  \n",
       "1  Automated Filtering of Intrinsic Movement Arti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: research_org_cities =====\n",
      "\n",
      "Returned Datasets: 10 (total = 893838)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>research_org_cities</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>178841</td>\n",
       "      <td>[{'id': 2648579, 'name': 'Glasgow'}]</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>115012</td>\n",
       "      <td>[{'id': 6325494, 'name': 'Québec'}, {'id': 632...</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id                                research_org_cities  \\\n",
       "0  178841               [{'id': 2648579, 'name': 'Glasgow'}]   \n",
       "1  115012  [{'id': 6325494, 'name': 'Québec'}, {'id': 632...   \n",
       "\n",
       "                                               title  \n",
       "0  Characteristics of study participants and non-...  \n",
       "1  Automated Filtering of Intrinsic Movement Arti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: research_org_countries =====\n",
      "\n",
      "Returned Datasets: 10 (total = 894333)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>research_org_countries</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>178841</td>\n",
       "      <td>[{'id': 'GB', 'name': 'United Kingdom'}]</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>115012</td>\n",
       "      <td>[{'id': 'CA', 'name': 'Canada'}, {'id': 'CA', ...</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id                             research_org_countries  \\\n",
       "0  178841           [{'id': 'GB', 'name': 'United Kingdom'}]   \n",
       "1  115012  [{'id': 'CA', 'name': 'Canada'}, {'id': 'CA', ...   \n",
       "\n",
       "                                               title  \n",
       "0  Characteristics of study participants and non-...  \n",
       "1  Automated Filtering of Intrinsic Movement Arti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: research_org_states =====\n",
      "\n",
      "Returned Datasets: 10 (total = 354302)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>research_org_states</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>115012</td>\n",
       "      <td>[{'id': 'CA-QC', 'name': 'Quebec'}, {'id': 'CA...</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>199396</td>\n",
       "      <td>[{'id': 'US-FL', 'name': 'Florida'}]</td>\n",
       "      <td>Decision table showing an example of a strateg...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id                                research_org_states  \\\n",
       "0  115012  [{'id': 'CA-QC', 'name': 'Quebec'}, {'id': 'CA...   \n",
       "1  199396               [{'id': 'US-FL', 'name': 'Florida'}]   \n",
       "\n",
       "                                               title  \n",
       "0  Automated Filtering of Intrinsic Movement Arti...  \n",
       "1  Decision table showing an example of a strateg...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: research_orgs =====\n",
      "\n",
      "Returned Datasets: 10 (total = 915813)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>research_orgs</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>178841</td>\n",
       "      <td>[{'id': 'grid.8756.c', 'country_name': 'United...</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>115012</td>\n",
       "      <td>[{'id': 'grid.411081.d', 'country_name': 'Cana...</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id                                      research_orgs  \\\n",
       "0  178841  [{'id': 'grid.8756.c', 'country_name': 'United...   \n",
       "1  115012  [{'id': 'grid.411081.d', 'country_name': 'Cana...   \n",
       "\n",
       "                                               title  \n",
       "0  Characteristics of study participants and non-...  \n",
       "1  Automated Filtering of Intrinsic Movement Arti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: researchers =====\n",
      "\n",
      "Returned Datasets: 10 (total = 922863)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>researchers</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>178841</td>\n",
       "      <td>[{'id': 'ur.01056736606.01', 'research_orgs': ...</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>115012</td>\n",
       "      <td>[{'id': 'ur.0664020414.04', 'research_orgs': [...</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id                                        researchers  \\\n",
       "0  178841  [{'id': 'ur.01056736606.01', 'research_orgs': ...   \n",
       "1  115012  [{'id': 'ur.0664020414.04', 'research_orgs': [...   \n",
       "\n",
       "                                               title  \n",
       "0  Characteristics of study participants and non-...  \n",
       "1  Automated Filtering of Intrinsic Movement Arti...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: title =====\n",
      "\n",
      "Returned Datasets: 10 (total = 1463507)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>178841</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id                                              title\n",
       "0  178841  Characteristics of study participants and non-...\n",
       "1  115012  Automated Filtering of Intrinsic Movement Arti..."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FIELD: year =====\n",
      "\n",
      "Returned Datasets: 10 (total = 1463507)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>178841</td>\n",
       "      <td>Characteristics of study participants and non-...</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>115012</td>\n",
       "      <td>Automated Filtering of Intrinsic Movement Arti...</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id                                              title  year\n",
       "0  178841  Characteristics of study participants and non-...  2013\n",
       "1  115012  Automated Filtering of Intrinsic Movement Arti...  2013"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import display\n",
    "\n",
    "q = \"\"\"search datasets where {} is not empty return datasets[id+title+{}] limit 10\"\"\"\n",
    "\n",
    "for x in fields:\n",
    "    print(f\"\\n===== FIELD: {x} =====\\n\")\n",
    "    display(dsl.query(q.format(x, x)).as_dataframe().head(2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "### Build stats of how many records have each field (with some value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1e925bd9add145fa9a6efb6fbd4d9409",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=36.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36m_make_request\u001b[0;34m(self, conn, method, url, timeout, chunked, **httplib_request_kw)\u001b[0m\n\u001b[1;32m    379\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Python 2.7, use buffering of HTTP responses\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 380\u001b[0;31m                 \u001b[0mhttplib_response\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbuffering\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    381\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Python 2.6 and older, Python 3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: getresponse() got an unexpected keyword argument 'buffering'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-3-8450fd2d3f5e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mf\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mprogress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfields\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0mq\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mq_template\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m     \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdsl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m     \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0mstats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'filter_by'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'results'\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcount_total\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/dimcli/core/api.py\u001b[0m in \u001b[0;36mquery\u001b[0;34m(self, q, show_results, retry, verbose)\u001b[0m\n\u001b[1;32m     92\u001b[0m         \u001b[0;31m#   Execute DSL query.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m         response = requests.post(\n\u001b[0;32m---> 94\u001b[0;31m             '{}/api/dsl.json'.format(self._url), data=q.encode(), headers=self._headers)\n\u001b[0m\u001b[1;32m     95\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatus_code\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m429\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     96\u001b[0m             \u001b[0;31m# Too Many Requests\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/requests/api.py\u001b[0m in \u001b[0;36mpost\u001b[0;34m(url, data, json, **kwargs)\u001b[0m\n\u001b[1;32m    114\u001b[0m     \"\"\"\n\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 116\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'post'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mjson\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    117\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/requests/api.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(method, url, **kwargs)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0;31m# cases, and look like a memory leak in others.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0msessions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSession\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 60\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     61\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/requests/sessions.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\u001b[0m\n\u001b[1;32m    531\u001b[0m         }\n\u001b[1;32m    532\u001b[0m         \u001b[0msend_kwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msettings\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 533\u001b[0;31m         \u001b[0mresp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0msend_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    534\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    535\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/requests/sessions.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, request, **kwargs)\u001b[0m\n\u001b[1;32m    644\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    645\u001b[0m         \u001b[0;31m# Send the request\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 646\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0madapter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    647\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    648\u001b[0m         \u001b[0;31m# Total elapsed time of the request (approximately)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/requests/adapters.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, request, stream, timeout, verify, cert, proxies)\u001b[0m\n\u001b[1;32m    447\u001b[0m                     \u001b[0mdecode_content\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    448\u001b[0m                     \u001b[0mretries\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax_retries\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 449\u001b[0;31m                     \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    450\u001b[0m                 )\n\u001b[1;32m    451\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36murlopen\u001b[0;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw)\u001b[0m\n\u001b[1;32m    599\u001b[0m                                                   \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout_obj\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    600\u001b[0m                                                   \u001b[0mbody\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheaders\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mheaders\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 601\u001b[0;31m                                                   chunked=chunked)\n\u001b[0m\u001b[1;32m    602\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    603\u001b[0m             \u001b[0;31m# If we're going to release the connection in ``finally:``, then\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36m_make_request\u001b[0;34m(self, conn, method, url, timeout, chunked, **httplib_request_kw)\u001b[0m\n\u001b[1;32m    381\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Python 2.6 and older, Python 3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    382\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 383\u001b[0;31m                     \u001b[0mhttplib_response\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    384\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    385\u001b[0m                     \u001b[0;31m# Remove the TypeError from the exception chain in Python 3;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/Cellar/python/3.7.4/Frameworks/Python.framework/Versions/3.7/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1334\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1335\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1336\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1337\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1338\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/Cellar/python/3.7.4/Frameworks/Python.framework/Versions/3.7/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    304\u001b[0m         \u001b[0;31m# read until we get a non-100 response\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    305\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 306\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    307\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    308\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/Cellar/python/3.7.4/Frameworks/Python.framework/Versions/3.7/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    265\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    266\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 267\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    268\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    269\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mLineTooLong\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"status line\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/Cellar/python/3.7.4/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    587\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    591\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_timeout_occurred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/Cellar/python/3.7.4/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1069\u001b[0m                   \u001b[0;34m\"non-zero flags not allowed in calls to recv_into() on %s\"\u001b[0m \u001b[0;34m%\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1070\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1073\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbuffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/Cellar/python/3.7.4/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    927\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 929\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    930\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    931\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "\n",
    "# one query with `is not empty` for field-filters\n",
    "q_template = \"\"\"search datasets where {} is not empty return datasets[id] limit 1\"\"\"\n",
    "\n",
    "# seed results with total number of orgs\n",
    "total = dsl.query(\"\"\"search datasets return datasets[id] limit 1\"\"\", verbose=False).count_total\n",
    "stats = [\n",
    "    {'filter_by': 'no filter (=all records)', 'results' : total}\n",
    "]\n",
    "\n",
    "for f in progress(fields):\n",
    "    q = q_template.format(f)\n",
    "    res = dsl.query(q, verbose=False)\n",
    "    time.sleep(0.5)\n",
    "    stats.append({'filter_by': f, 'results' : res.count_total})\n",
    "\n",
    "\n",
    "# save to a dataframe\n",
    "df = pd.DataFrame().from_dict(stats)\n",
    "df.sort_values(\"results\", inplace=True, ascending=False)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "### Create a chart and save to a file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "alignmentgroup": "True",
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "filter_by=%{x}<br>results=%{y}",
         "legendgroup": "",
         "marker": {
          "color": "#636efa"
         },
         "name": "",
         "offsetgroup": "",
         "orientation": "v",
         "showlegend": false,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "None (=All records)",
          "date",
          "title",
          "license",
          "id",
          "figshare_url",
          "date_inserted",
          "date_created",
          "year",
          "authors",
          "repository_id",
          "description",
          "language_title",
          "language_desc",
          "date_modified",
          "doi",
          "keywords",
          "associated_publication_id",
          "journal",
          "researchers",
          "research_orgs",
          "research_org_countries",
          "research_org_cities",
          "category_for",
          "funders",
          "funder_countries",
          "research_org_states",
          "associated_grant_ids",
          "category_rcdc",
          "category_hrcs_hc",
          "category_hra",
          "category_icrp_cso",
          "category_bra",
          "category_hrcs_rac",
          "category_icrp_ct",
          "publication_ids",
          "date_embargo"
         ],
         "xaxis": "x",
         "y": [
          1463507,
          1463507,
          1463507,
          1463507,
          1463507,
          1463507,
          1463507,
          1463507,
          1463507,
          1463507,
          1463505,
          1463495,
          1463482,
          1463482,
          1463450,
          1462787,
          1461780,
          939983,
          939833,
          922863,
          915813,
          894333,
          893838,
          691643,
          564719,
          564719,
          354302,
          350682,
          331613,
          179747,
          162484,
          159761,
          155622,
          119088,
          65032,
          44048,
          6964
         ],
         "yaxis": "y"
        }
       ],
       "layout": {
        "autosize": true,
        "barmode": "relative",
        "legend": {
         "tracegroupgap": 0
        },
        "margin": {
         "t": 60
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "xaxis": {
         "anchor": "y",
         "autorange": true,
         "domain": [
          0,
          1
         ],
         "range": [
          -0.5,
          36.5
         ],
         "title": {
          "text": "filter_by"
         },
         "type": "category"
        },
        "yaxis": {
         "anchor": "x",
         "autorange": true,
         "domain": [
          0,
          1
         ],
         "range": [
          0,
          1540533.6842105263
         ],
         "title": {
          "text": "results"
         },
         "type": "linear"
        }
       }
      },
      "image/png": "",
      "text/html": [
       "<div>\n",
       "        \n",
       "        \n",
       "            <div id=\"96b1349c-5579-44df-af77-0b4a33b6e891\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n",
       "            <script type=\"text/javascript\">\n",
       "                require([\"plotly\"], function(Plotly) {\n",
       "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
       "                    \n",
       "                if (document.getElementById(\"96b1349c-5579-44df-af77-0b4a33b6e891\")) {\n",
       "                    Plotly.newPlot(\n",
       "                        '96b1349c-5579-44df-af77-0b4a33b6e891',\n",
       "                        [{\"alignmentgroup\": \"True\", \"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"filter_by=%{x}<br>results=%{y}\", \"legendgroup\": \"\", \"marker\": {\"color\": \"#636efa\"}, \"name\": \"\", \"offsetgroup\": \"\", \"orientation\": \"v\", \"showlegend\": false, \"textposition\": \"auto\", \"type\": \"bar\", \"x\": [\"None (=All records)\", \"date\", \"title\", \"license\", \"id\", \"figshare_url\", \"date_inserted\", \"date_created\", \"year\", \"authors\", \"repository_id\", \"description\", \"language_title\", \"language_desc\", \"date_modified\", \"doi\", \"keywords\", \"associated_publication_id\", \"journal\", \"researchers\", \"research_orgs\", \"research_org_countries\", \"research_org_cities\", \"category_for\", \"funders\", \"funder_countries\", \"research_org_states\", \"associated_grant_ids\", \"category_rcdc\", \"category_hrcs_hc\", \"category_hra\", \"category_icrp_cso\", \"category_bra\", \"category_hrcs_rac\", \"category_icrp_ct\", \"publication_ids\", \"date_embargo\"], \"xaxis\": \"x\", \"y\": [1463507, 1463507, 1463507, 1463507, 1463507, 1463507, 1463507, 1463507, 1463507, 1463507, 1463505, 1463495, 1463482, 1463482, 1463450, 1462787, 1461780, 939983, 939833, 922863, 915813, 894333, 893838, 691643, 564719, 564719, 354302, 350682, 331613, 179747, 162484, 159761, 155622, 119088, 65032, 44048, 6964], \"yaxis\": \"y\"}],\n",
       "                        {\"barmode\": \"relative\", \"legend\": {\"tracegroupgap\": 0}, \"margin\": {\"t\": 60}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"filter_by\"}}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"results\"}}},\n",
       "                        {\"responsive\": true}\n",
       "                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('96b1349c-5579-44df-af77-0b4a33b6e891');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })\n",
       "                };\n",
       "                });\n",
       "            </script>\n",
       "        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = px.bar(df, x=df['filter_by'], y=df['results'])\n",
    "plot(fig, filename=\"datasets-fields-overview.html\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "### Build YEARLY stats on how many records have a certain field "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c2ad659b075645b8929b0884939bf991",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=36.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "#\n",
    "# get how many dataset records have values for each field, for each year\n",
    "#\n",
    "\n",
    "\n",
    "# one query with `is not empty` for field-filters\n",
    "q_template = \"\"\"search datasets where {} is not empty return year limit 150\"\"\"\n",
    "\n",
    "# seed with all records data (no filter)\n",
    "seed = dsl.query(\"\"\"search datasets return year limit 150\"\"\", verbose=False).as_dataframe()\n",
    "seed['segment'] = \"all records\"\n",
    "\n",
    "for f in progress(fields):\n",
    "    q = q_template.format(f)\n",
    "    res = dsl.query(q, verbose=False).as_dataframe()\n",
    "    res['segment'] = f\n",
    "    seed = seed.append(res, ignore_index=True )\n",
    "    time.sleep(0.5)\n",
    "\n",
    "# rename year column\n",
    "seed = seed.rename(columns={'id' : 'year'})\n",
    "seed = seed.astype({'year': 'int32'})\n",
    "\n",
    "#\n",
    "# fill in (normalize) missing years in order to build a line chart\n",
    "#\n",
    "\n",
    "yrange = [seed['year'].min(), seed['year'].max()]\n",
    "# yrange[1]+1 to make sure max value is included\n",
    "all_years = [x for x in range(yrange[0], yrange[1]+1)]  \n",
    "\n",
    "def add_missing_years(field_name):\n",
    "    global seed\n",
    "    # list of years that already have values \n",
    "    known_years = list(seed[seed[\"segment\"] == field_name]['year'])\n",
    "    l = [] \n",
    "    for x in all_years:\n",
    "        if x not in known_years:\n",
    "            l.append({'segment' : field_name , 'year' : x, 'count': 0 })\n",
    "    seed = seed.append(l, ignore_index=True )\n",
    "    \n",
    "# finally, call the routine for all field-names\n",
    "all_field_names = seed['segment'].value_counts().index.tolist()\n",
    "for field in all_field_names:\n",
    "    add_missing_years(field)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "### Charting the results for the yearly breakdwn\n",
    "\n",
    "* a lot of overlapping lines for fields appearing frequenty\n",
    "* need to set a start year too cause otherwise it starts from 1495 (????) need to look more into this"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=all records<br>year=%{x}<br>count=%{y}",
         "legendgroup": "all records",
         "line": {
          "color": "#636efa",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "all records",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          546,
          581,
          767,
          1194,
          1242,
          1007,
          945,
          1046,
          806,
          1570,
          1571,
          2132,
          2098,
          797,
          2164,
          1343,
          3212,
          1922,
          2754,
          3035,
          3949,
          7707,
          7221,
          29201,
          21903,
          53324,
          63184,
          26190,
          22035,
          21000,
          33715,
          38337,
          56741,
          145523,
          125270,
          122949,
          142245,
          145959,
          169063,
          179426,
          14110
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=associated_grant_ids<br>year=%{x}<br>count=%{y}",
         "legendgroup": "associated_grant_ids",
         "line": {
          "color": "#EF553B",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "associated_grant_ids",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          11,
          93,
          9,
          55,
          81,
          82,
          123,
          296,
          267,
          487,
          1049,
          1672,
          3330,
          5108,
          7284,
          11157,
          18570,
          51494,
          42973,
          42677,
          42466,
          41973,
          43803,
          35557,
          65
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=associated_publication_id<br>year=%{x}<br>count=%{y}",
         "legendgroup": "associated_publication_id",
         "line": {
          "color": "#00cc96",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "associated_publication_id",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          28,
          21,
          32,
          23,
          29,
          26,
          38,
          36,
          32,
          36,
          26,
          48,
          65,
          57,
          66,
          63,
          1024,
          613,
          768,
          849,
          1193,
          1424,
          1989,
          2994,
          4391,
          6062,
          7915,
          8306,
          12721,
          16537,
          21588,
          32255,
          47227,
          128483,
          100703,
          97403,
          99180,
          102318,
          122585,
          119842,
          738
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=authors<br>year=%{x}<br>count=%{y}",
         "legendgroup": "authors",
         "line": {
          "color": "#ab63fa",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "authors",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          546,
          581,
          767,
          1194,
          1242,
          1007,
          945,
          1046,
          806,
          1570,
          1571,
          2132,
          2098,
          797,
          2164,
          1343,
          3212,
          1922,
          2754,
          3035,
          3949,
          7707,
          7221,
          29201,
          21903,
          53324,
          63184,
          26190,
          22035,
          21000,
          33715,
          38337,
          56741,
          145523,
          125270,
          122949,
          142245,
          145959,
          169063,
          179426,
          14110
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=category_bra<br>year=%{x}<br>count=%{y}",
         "legendgroup": "category_bra",
         "line": {
          "color": "#FFA15A",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "category_bra",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          1,
          1,
          0,
          1,
          1,
          5,
          19,
          51,
          434,
          872,
          1795,
          2727,
          4136,
          6613,
          10167,
          17512,
          16201,
          17944,
          12594,
          13619,
          21829,
          26827,
          2272
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=category_for<br>year=%{x}<br>count=%{y}",
         "legendgroup": "category_for",
         "line": {
          "color": "#19d3f3",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "category_for",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          159,
          144,
          187,
          256,
          238,
          214,
          252,
          186,
          157,
          274,
          348,
          344,
          493,
          239,
          289,
          187,
          823,
          693,
          698,
          938,
          1333,
          1423,
          2199,
          3371,
          4712,
          6375,
          8799,
          8205,
          12454,
          13456,
          17436,
          24917,
          35325,
          77336,
          68665,
          74692,
          60597,
          69919,
          87812,
          96670,
          7894
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=category_hra<br>year=%{x}<br>count=%{y}",
         "legendgroup": "category_hra",
         "line": {
          "color": "#FF6692",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "category_hra",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          3,
          0,
          1,
          1,
          0,
          25,
          3,
          9,
          32,
          48,
          511,
          992,
          1942,
          2903,
          4397,
          6875,
          10461,
          16975,
          15839,
          17895,
          13474,
          14448,
          23964,
          29242,
          2444
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=category_hrcs_hc<br>year=%{x}<br>count=%{y}",
         "legendgroup": "category_hrcs_hc",
         "line": {
          "color": "#B6E880",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "category_hrcs_hc",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          7,
          92,
          4,
          0,
          4,
          47,
          3,
          35,
          37,
          60,
          481,
          1028,
          1873,
          3043,
          4499,
          7073,
          11227,
          22855,
          18884,
          19714,
          15615,
          17065,
          24402,
          29302,
          2396
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=category_hrcs_rac<br>year=%{x}<br>count=%{y}",
         "legendgroup": "category_hrcs_rac",
         "line": {
          "color": "#FF97FF",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "category_hrcs_rac",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          4,
          2,
          2,
          0,
          4,
          3,
          7,
          15,
          22,
          55,
          447,
          882,
          1772,
          2804,
          3883,
          6277,
          9267,
          13441,
          11614,
          12309,
          9814,
          9597,
          15891,
          19229,
          1747
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=category_icrp_cso<br>year=%{x}<br>count=%{y}",
         "legendgroup": "category_icrp_cso",
         "line": {
          "color": "#FECB52",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "category_icrp_cso",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          0,
          1,
          2,
          4,
          3,
          4,
          0,
          2,
          2,
          0,
          4,
          3,
          4,
          3,
          3,
          1,
          76,
          33,
          26,
          57,
          93,
          108,
          216,
          474,
          780,
          891,
          1609,
          1897,
          2727,
          3891,
          5045,
          7454,
          10635,
          15885,
          14447,
          16102,
          13428,
          13923,
          22553,
          25259,
          2101
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=category_icrp_ct<br>year=%{x}<br>count=%{y}",
         "legendgroup": "category_icrp_ct",
         "line": {
          "color": "#636efa",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "category_icrp_ct",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          10,
          91,
          5,
          0,
          1,
          26,
          10,
          10,
          17,
          38,
          178,
          342,
          675,
          1106,
          1660,
          2718,
          4340,
          8848,
          7298,
          6997,
          6173,
          6535,
          7841,
          9283,
          826
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=category_rcdc<br>year=%{x}<br>count=%{y}",
         "legendgroup": "category_rcdc",
         "line": {
          "color": "#EF553B",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "category_rcdc",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          2,
          1,
          3,
          3,
          2,
          2,
          7,
          4,
          5,
          5,
          5,
          5,
          6,
          8,
          5,
          1,
          56,
          130,
          35,
          75,
          70,
          116,
          167,
          212,
          316,
          489,
          1350,
          1944,
          3895,
          5353,
          7854,
          12498,
          19531,
          43437,
          36501,
          39779,
          27398,
          28790,
          45013,
          52127,
          4405
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=date<br>year=%{x}<br>count=%{y}",
         "legendgroup": "date",
         "line": {
          "color": "#00cc96",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "date",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          546,
          581,
          767,
          1194,
          1242,
          1007,
          945,
          1046,
          806,
          1570,
          1571,
          2132,
          2098,
          797,
          2164,
          1343,
          3212,
          1922,
          2754,
          3035,
          3949,
          7707,
          7221,
          29201,
          21903,
          53324,
          63184,
          26190,
          22035,
          21000,
          33715,
          38337,
          56741,
          145523,
          125270,
          122949,
          142245,
          145959,
          169063,
          179426,
          14110
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=date_created<br>year=%{x}<br>count=%{y}",
         "legendgroup": "date_created",
         "line": {
          "color": "#ab63fa",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "date_created",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          546,
          581,
          767,
          1194,
          1242,
          1007,
          945,
          1046,
          806,
          1570,
          1571,
          2132,
          2098,
          797,
          2164,
          1343,
          3212,
          1922,
          2754,
          3035,
          3949,
          7707,
          7221,
          29201,
          21903,
          53324,
          63184,
          26190,
          22035,
          21000,
          33715,
          38337,
          56741,
          145523,
          125270,
          122949,
          142245,
          145959,
          169063,
          179426,
          14110
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=date_embargo<br>year=%{x}<br>count=%{y}",
         "legendgroup": "date_embargo",
         "line": {
          "color": "#FFA15A",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "date_embargo",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          14,
          291,
          1221,
          2230,
          2990,
          218
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=date_inserted<br>year=%{x}<br>count=%{y}",
         "legendgroup": "date_inserted",
         "line": {
          "color": "#19d3f3",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "date_inserted",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          546,
          581,
          767,
          1194,
          1242,
          1007,
          945,
          1046,
          806,
          1570,
          1571,
          2132,
          2098,
          797,
          2164,
          1343,
          3212,
          1922,
          2754,
          3035,
          3949,
          7707,
          7221,
          29201,
          21903,
          53324,
          63184,
          26190,
          22035,
          21000,
          33715,
          38337,
          56741,
          145523,
          125270,
          122949,
          142245,
          145959,
          169063,
          179426,
          14110
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=date_modified<br>year=%{x}<br>count=%{y}",
         "legendgroup": "date_modified",
         "line": {
          "color": "#FF6692",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "date_modified",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          546,
          581,
          767,
          1194,
          1242,
          1007,
          945,
          1046,
          806,
          1570,
          1571,
          2132,
          2098,
          797,
          2164,
          1343,
          3212,
          1922,
          2754,
          3035,
          3949,
          7707,
          7221,
          29201,
          21903,
          53324,
          63184,
          26190,
          22035,
          21000,
          33715,
          38329,
          56735,
          145501,
          125255,
          122947,
          142244,
          145957,
          169062,
          179426,
          14110
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=description<br>year=%{x}<br>count=%{y}",
         "legendgroup": "description",
         "line": {
          "color": "#B6E880",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "description",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          546,
          581,
          767,
          1194,
          1242,
          1007,
          945,
          1046,
          806,
          1570,
          1571,
          2132,
          2098,
          797,
          2164,
          1343,
          3212,
          1922,
          2754,
          3035,
          3949,
          7707,
          7221,
          29201,
          21903,
          53324,
          63184,
          26190,
          22035,
          21000,
          33715,
          38337,
          56741,
          145520,
          125267,
          122946,
          142245,
          145957,
          169062,
          179426,
          14110
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=doi<br>year=%{x}<br>count=%{y}",
         "legendgroup": "doi",
         "line": {
          "color": "#FF97FF",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "doi",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          546,
          581,
          767,
          1194,
          1242,
          1007,
          945,
          1046,
          806,
          1570,
          1571,
          2132,
          2098,
          797,
          2164,
          1343,
          3212,
          1922,
          2754,
          3035,
          3949,
          7707,
          7221,
          29201,
          21903,
          53324,
          63184,
          26189,
          22031,
          21000,
          33714,
          38336,
          56741,
          145521,
          125268,
          122948,
          142245,
          145958,
          169061,
          178739,
          14092
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=figshare_url<br>year=%{x}<br>count=%{y}",
         "legendgroup": "figshare_url",
         "line": {
          "color": "#FECB52",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "figshare_url",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          546,
          581,
          767,
          1194,
          1242,
          1007,
          945,
          1046,
          806,
          1570,
          1571,
          2132,
          2098,
          797,
          2164,
          1343,
          3212,
          1922,
          2754,
          3035,
          3949,
          7707,
          7221,
          29201,
          21903,
          53324,
          63184,
          26190,
          22035,
          21000,
          33715,
          38337,
          56741,
          145523,
          125270,
          122949,
          142245,
          145959,
          169063,
          179426,
          14110
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=funder_countries<br>year=%{x}<br>count=%{y}",
         "legendgroup": "funder_countries",
         "line": {
          "color": "#636efa",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "funder_countries",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          12,
          95,
          23,
          78,
          119,
          118,
          192,
          361,
          352,
          608,
          1187,
          1896,
          3813,
          5684,
          8444,
          12945,
          26050,
          80069,
          71290,
          68823,
          68939,
          70094,
          75686,
          67687,
          153
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=funders<br>year=%{x}<br>count=%{y}",
         "legendgroup": "funders",
         "line": {
          "color": "#EF553B",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "funders",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          12,
          95,
          23,
          78,
          119,
          118,
          192,
          361,
          352,
          608,
          1187,
          1896,
          3813,
          5684,
          8444,
          12945,
          26050,
          80069,
          71290,
          68823,
          68939,
          70094,
          75686,
          67687,
          153
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=id<br>year=%{x}<br>count=%{y}",
         "legendgroup": "id",
         "line": {
          "color": "#00cc96",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "id",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          546,
          581,
          767,
          1194,
          1242,
          1007,
          945,
          1046,
          806,
          1570,
          1571,
          2132,
          2098,
          797,
          2164,
          1343,
          3212,
          1922,
          2754,
          3035,
          3949,
          7707,
          7221,
          29201,
          21903,
          53324,
          63184,
          26190,
          22035,
          21000,
          33715,
          38337,
          56741,
          145523,
          125270,
          122949,
          142245,
          145959,
          169063,
          179426,
          14110
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=journal<br>year=%{x}<br>count=%{y}",
         "legendgroup": "journal",
         "line": {
          "color": "#ab63fa",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "journal",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          25,
          19,
          30,
          23,
          28,
          26,
          38,
          36,
          32,
          36,
          26,
          48,
          62,
          57,
          66,
          63,
          1024,
          613,
          768,
          849,
          1193,
          1424,
          1989,
          2990,
          4390,
          6061,
          7914,
          8305,
          12718,
          16536,
          21588,
          32250,
          47225,
          128480,
          100701,
          97395,
          99174,
          102294,
          122549,
          119830,
          737
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=keywords<br>year=%{x}<br>count=%{y}",
         "legendgroup": "keywords",
         "line": {
          "color": "#FFA15A",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "keywords",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          546,
          581,
          767,
          1194,
          1242,
          1007,
          945,
          1046,
          806,
          1570,
          1571,
          2132,
          2098,
          797,
          2164,
          1343,
          3212,
          1922,
          2754,
          3035,
          3949,
          7707,
          7221,
          29201,
          21903,
          53324,
          63178,
          26181,
          22029,
          20987,
          33702,
          38299,
          56703,
          143968,
          125223,
          122948,
          142245,
          145959,
          169062,
          179426,
          14110
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=language_desc<br>year=%{x}<br>count=%{y}",
         "legendgroup": "language_desc",
         "line": {
          "color": "#19d3f3",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "language_desc",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          546,
          581,
          767,
          1194,
          1242,
          1007,
          945,
          1046,
          806,
          1570,
          1571,
          2132,
          2098,
          797,
          2164,
          1343,
          3212,
          1922,
          2754,
          3035,
          3949,
          7707,
          7221,
          29201,
          21903,
          53324,
          63184,
          26190,
          22035,
          21000,
          33715,
          38337,
          56741,
          145508,
          125268,
          122948,
          142245,
          145959,
          169057,
          179426,
          14109
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=language_title<br>year=%{x}<br>count=%{y}",
         "legendgroup": "language_title",
         "line": {
          "color": "#FF6692",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "language_title",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          546,
          581,
          767,
          1194,
          1242,
          1007,
          945,
          1046,
          806,
          1570,
          1571,
          2132,
          2098,
          797,
          2164,
          1343,
          3212,
          1922,
          2754,
          3035,
          3949,
          7707,
          7221,
          29201,
          21903,
          53324,
          63184,
          26190,
          22035,
          21000,
          33715,
          38337,
          56741,
          145508,
          125268,
          122948,
          142245,
          145959,
          169057,
          179426,
          14109
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=license<br>year=%{x}<br>count=%{y}",
         "legendgroup": "license",
         "line": {
          "color": "#B6E880",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "license",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          546,
          581,
          767,
          1194,
          1242,
          1007,
          945,
          1046,
          806,
          1570,
          1571,
          2132,
          2098,
          797,
          2164,
          1343,
          3212,
          1922,
          2754,
          3035,
          3949,
          7707,
          7221,
          29201,
          21903,
          53324,
          63184,
          26190,
          22035,
          21000,
          33715,
          38337,
          56741,
          145523,
          125270,
          122949,
          142245,
          145959,
          169063,
          179426,
          14110
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=publication_ids<br>year=%{x}<br>count=%{y}",
         "legendgroup": "publication_ids",
         "line": {
          "color": "#FF97FF",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "publication_ids",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          24,
          28,
          38,
          27,
          30,
          83,
          91,
          41,
          47,
          56,
          30,
          104,
          100,
          63,
          108,
          70,
          105,
          75,
          131,
          161,
          147,
          199,
          234,
          191,
          213,
          235,
          376,
          613,
          561,
          567,
          830,
          763,
          883,
          978,
          820,
          765,
          872,
          1365,
          14341,
          17549,
          0
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=repository_id<br>year=%{x}<br>count=%{y}",
         "legendgroup": "repository_id",
         "line": {
          "color": "#FECB52",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "repository_id",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          546,
          581,
          767,
          1194,
          1242,
          1007,
          945,
          1046,
          806,
          1570,
          1571,
          2132,
          2098,
          797,
          2164,
          1343,
          3212,
          1922,
          2754,
          3035,
          3949,
          7707,
          7221,
          29201,
          21903,
          53324,
          63184,
          26190,
          22035,
          21000,
          33715,
          38337,
          56741,
          145523,
          125270,
          122949,
          142245,
          145959,
          169063,
          179425,
          14109
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=research_org_cities<br>year=%{x}<br>count=%{y}",
         "legendgroup": "research_org_cities",
         "line": {
          "color": "#636efa",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "research_org_cities",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          18,
          16,
          27,
          19,
          23,
          22,
          25,
          26,
          17,
          24,
          14,
          32,
          47,
          38,
          41,
          39,
          111,
          247,
          237,
          289,
          638,
          1000,
          1410,
          2346,
          3083,
          4343,
          5837,
          7168,
          10401,
          14091,
          19440,
          30031,
          46049,
          125642,
          97749,
          94338,
          95936,
          99616,
          118983,
          113819,
          459
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=research_org_countries<br>year=%{x}<br>count=%{y}",
         "legendgroup": "research_org_countries",
         "line": {
          "color": "#EF553B",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "research_org_countries",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          18,
          16,
          27,
          19,
          23,
          22,
          26,
          26,
          17,
          24,
          14,
          32,
          47,
          38,
          41,
          39,
          111,
          247,
          237,
          289,
          638,
          1000,
          1411,
          2347,
          3083,
          4343,
          5837,
          7169,
          10403,
          14091,
          19450,
          30037,
          46054,
          125673,
          97782,
          94396,
          95988,
          99708,
          119079,
          113924,
          460
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=research_org_states<br>year=%{x}<br>count=%{y}",
         "legendgroup": "research_org_states",
         "line": {
          "color": "#00cc96",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "research_org_states",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          13,
          13,
          21,
          14,
          19,
          17,
          17,
          17,
          12,
          14,
          9,
          20,
          27,
          21,
          18,
          22,
          63,
          152,
          133,
          165,
          309,
          534,
          645,
          1088,
          1361,
          2003,
          2711,
          3518,
          5402,
          7586,
          10559,
          14810,
          21315,
          53599,
          37789,
          36700,
          36327,
          35979,
          41689,
          39391,
          94
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=research_orgs<br>year=%{x}<br>count=%{y}",
         "legendgroup": "research_orgs",
         "line": {
          "color": "#ab63fa",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "research_orgs",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          21,
          17,
          29,
          23,
          27,
          25,
          33,
          28,
          22,
          25,
          14,
          32,
          48,
          43,
          44,
          43,
          139,
          291,
          326,
          362,
          671,
          1070,
          1542,
          2448,
          3259,
          4621,
          6106,
          7443,
          10703,
          14580,
          19962,
          30635,
          47152,
          128362,
          99940,
          96625,
          98402,
          102110,
          121501,
          116432,
          475
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=researchers<br>year=%{x}<br>count=%{y}",
         "legendgroup": "researchers",
         "line": {
          "color": "#FFA15A",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "researchers",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          24,
          17,
          26,
          22,
          23,
          24,
          31,
          29,
          29,
          32,
          24,
          46,
          60,
          50,
          62,
          57,
          910,
          584,
          717,
          809,
          1144,
          1346,
          1949,
          2936,
          4211,
          5838,
          7642,
          8075,
          12427,
          16244,
          21295,
          32043,
          47122,
          128136,
          100033,
          96872,
          98694,
          101674,
          121151,
          109797,
          492
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=title<br>year=%{x}<br>count=%{y}",
         "legendgroup": "title",
         "line": {
          "color": "#19d3f3",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "title",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          546,
          581,
          767,
          1194,
          1242,
          1007,
          945,
          1046,
          806,
          1570,
          1571,
          2132,
          2098,
          797,
          2164,
          1343,
          3212,
          1922,
          2754,
          3035,
          3949,
          7707,
          7221,
          29201,
          21903,
          53324,
          63184,
          26190,
          22035,
          21000,
          33715,
          38337,
          56741,
          145523,
          125270,
          122949,
          142245,
          145959,
          169063,
          179426,
          14110
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "segment=year<br>year=%{x}<br>count=%{y}",
         "legendgroup": "year",
         "line": {
          "color": "#FF6692",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "year",
         "showlegend": true,
         "type": "scattergl",
         "x": [
          1980,
          1981,
          1982,
          1983,
          1984,
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020
         ],
         "xaxis": "x",
         "y": [
          546,
          581,
          767,
          1194,
          1242,
          1007,
          945,
          1046,
          806,
          1570,
          1571,
          2132,
          2098,
          797,
          2164,
          1343,
          3212,
          1922,
          2754,
          3035,
          3949,
          7707,
          7221,
          29201,
          21903,
          53324,
          63184,
          26190,
          22035,
          21000,
          33715,
          38337,
          56741,
          145523,
          125270,
          122949,
          142245,
          145959,
          169063,
          179426,
          14110
         ],
         "yaxis": "y"
        }
       ],
       "layout": {
        "autosize": true,
        "legend": {
         "title": {
          "text": "segment"
         },
         "tracegroupgap": 0
        },
        "margin": {
         "t": 60
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "xaxis": {
         "anchor": "y",
         "autorange": true,
         "domain": [
          0,
          1
         ],
         "range": [
          1980,
          2020
         ],
         "title": {
          "text": "year"
         },
         "type": "linear"
        },
        "yaxis": {
         "anchor": "x",
         "autorange": true,
         "domain": [
          0,
          1
         ],
         "range": [
          -9968.11111111111,
          189394.11111111112
         ],
         "title": {
          "text": "count"
         },
         "type": "linear"
        }
       }
      },
      "image/png": "",
      "text/html": [
       "<div>\n",
       "        \n",
       "        \n",
       "            <div id=\"d8983c9c-6420-4b06-a745-ee1defa30e3e\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n",
       "            <script type=\"text/javascript\">\n",
       "                require([\"plotly\"], function(Plotly) {\n",
       "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
       "                    \n",
       "                if (document.getElementById(\"d8983c9c-6420-4b06-a745-ee1defa30e3e\")) {\n",
       "                    Plotly.newPlot(\n",
       "                        'd8983c9c-6420-4b06-a745-ee1defa30e3e',\n",
       "                        [{\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=all records<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"all records\", \"line\": {\"color\": \"#636efa\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"all records\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [546, 581, 767, 1194, 1242, 1007, 945, 1046, 806, 1570, 1571, 2132, 2098, 797, 2164, 1343, 3212, 1922, 2754, 3035, 3949, 7707, 7221, 29201, 21903, 53324, 63184, 26190, 22035, 21000, 33715, 38337, 56741, 145523, 125270, 122949, 142245, 145959, 169063, 179426, 14110], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=associated_grant_ids<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"associated_grant_ids\", \"line\": {\"color\": \"#EF553B\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"associated_grant_ids\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 93, 9, 55, 81, 82, 123, 296, 267, 487, 1049, 1672, 3330, 5108, 7284, 11157, 18570, 51494, 42973, 42677, 42466, 41973, 43803, 35557, 65], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=associated_publication_id<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"associated_publication_id\", \"line\": {\"color\": \"#00cc96\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"associated_publication_id\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [28, 21, 32, 23, 29, 26, 38, 36, 32, 36, 26, 48, 65, 57, 66, 63, 1024, 613, 768, 849, 1193, 1424, 1989, 2994, 4391, 6062, 7915, 8306, 12721, 16537, 21588, 32255, 47227, 128483, 100703, 97403, 99180, 102318, 122585, 119842, 738], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=authors<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"authors\", \"line\": {\"color\": \"#ab63fa\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"authors\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [546, 581, 767, 1194, 1242, 1007, 945, 1046, 806, 1570, 1571, 2132, 2098, 797, 2164, 1343, 3212, 1922, 2754, 3035, 3949, 7707, 7221, 29201, 21903, 53324, 63184, 26190, 22035, 21000, 33715, 38337, 56741, 145523, 125270, 122949, 142245, 145959, 169063, 179426, 14110], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=category_bra<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"category_bra\", \"line\": {\"color\": \"#FFA15A\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"category_bra\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 5, 19, 51, 434, 872, 1795, 2727, 4136, 6613, 10167, 17512, 16201, 17944, 12594, 13619, 21829, 26827, 2272], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=category_for<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"category_for\", \"line\": {\"color\": \"#19d3f3\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"category_for\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [159, 144, 187, 256, 238, 214, 252, 186, 157, 274, 348, 344, 493, 239, 289, 187, 823, 693, 698, 938, 1333, 1423, 2199, 3371, 4712, 6375, 8799, 8205, 12454, 13456, 17436, 24917, 35325, 77336, 68665, 74692, 60597, 69919, 87812, 96670, 7894], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=category_hra<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"category_hra\", \"line\": {\"color\": \"#FF6692\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"category_hra\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 1, 0, 25, 3, 9, 32, 48, 511, 992, 1942, 2903, 4397, 6875, 10461, 16975, 15839, 17895, 13474, 14448, 23964, 29242, 2444], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=category_hrcs_hc<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"category_hrcs_hc\", \"line\": {\"color\": \"#B6E880\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"category_hrcs_hc\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 92, 4, 0, 4, 47, 3, 35, 37, 60, 481, 1028, 1873, 3043, 4499, 7073, 11227, 22855, 18884, 19714, 15615, 17065, 24402, 29302, 2396], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=category_hrcs_rac<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"category_hrcs_rac\", \"line\": {\"color\": \"#FF97FF\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"category_hrcs_rac\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 4, 3, 7, 15, 22, 55, 447, 882, 1772, 2804, 3883, 6277, 9267, 13441, 11614, 12309, 9814, 9597, 15891, 19229, 1747], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=category_icrp_cso<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"category_icrp_cso\", \"line\": {\"color\": \"#FECB52\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"category_icrp_cso\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [0, 1, 2, 4, 3, 4, 0, 2, 2, 0, 4, 3, 4, 3, 3, 1, 76, 33, 26, 57, 93, 108, 216, 474, 780, 891, 1609, 1897, 2727, 3891, 5045, 7454, 10635, 15885, 14447, 16102, 13428, 13923, 22553, 25259, 2101], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=category_icrp_ct<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"category_icrp_ct\", \"line\": {\"color\": \"#636efa\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"category_icrp_ct\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 91, 5, 0, 1, 26, 10, 10, 17, 38, 178, 342, 675, 1106, 1660, 2718, 4340, 8848, 7298, 6997, 6173, 6535, 7841, 9283, 826], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=category_rcdc<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"category_rcdc\", \"line\": {\"color\": \"#EF553B\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"category_rcdc\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [2, 1, 3, 3, 2, 2, 7, 4, 5, 5, 5, 5, 6, 8, 5, 1, 56, 130, 35, 75, 70, 116, 167, 212, 316, 489, 1350, 1944, 3895, 5353, 7854, 12498, 19531, 43437, 36501, 39779, 27398, 28790, 45013, 52127, 4405], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=date<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"date\", \"line\": {\"color\": \"#00cc96\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"date\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [546, 581, 767, 1194, 1242, 1007, 945, 1046, 806, 1570, 1571, 2132, 2098, 797, 2164, 1343, 3212, 1922, 2754, 3035, 3949, 7707, 7221, 29201, 21903, 53324, 63184, 26190, 22035, 21000, 33715, 38337, 56741, 145523, 125270, 122949, 142245, 145959, 169063, 179426, 14110], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=date_created<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"date_created\", \"line\": {\"color\": \"#ab63fa\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"date_created\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [546, 581, 767, 1194, 1242, 1007, 945, 1046, 806, 1570, 1571, 2132, 2098, 797, 2164, 1343, 3212, 1922, 2754, 3035, 3949, 7707, 7221, 29201, 21903, 53324, 63184, 26190, 22035, 21000, 33715, 38337, 56741, 145523, 125270, 122949, 142245, 145959, 169063, 179426, 14110], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=date_embargo<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"date_embargo\", \"line\": {\"color\": \"#FFA15A\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"date_embargo\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 291, 1221, 2230, 2990, 218], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=date_inserted<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"date_inserted\", \"line\": {\"color\": \"#19d3f3\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"date_inserted\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [546, 581, 767, 1194, 1242, 1007, 945, 1046, 806, 1570, 1571, 2132, 2098, 797, 2164, 1343, 3212, 1922, 2754, 3035, 3949, 7707, 7221, 29201, 21903, 53324, 63184, 26190, 22035, 21000, 33715, 38337, 56741, 145523, 125270, 122949, 142245, 145959, 169063, 179426, 14110], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=date_modified<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"date_modified\", \"line\": {\"color\": \"#FF6692\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"date_modified\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [546, 581, 767, 1194, 1242, 1007, 945, 1046, 806, 1570, 1571, 2132, 2098, 797, 2164, 1343, 3212, 1922, 2754, 3035, 3949, 7707, 7221, 29201, 21903, 53324, 63184, 26190, 22035, 21000, 33715, 38329, 56735, 145501, 125255, 122947, 142244, 145957, 169062, 179426, 14110], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=description<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"description\", \"line\": {\"color\": \"#B6E880\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"description\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [546, 581, 767, 1194, 1242, 1007, 945, 1046, 806, 1570, 1571, 2132, 2098, 797, 2164, 1343, 3212, 1922, 2754, 3035, 3949, 7707, 7221, 29201, 21903, 53324, 63184, 26190, 22035, 21000, 33715, 38337, 56741, 145520, 125267, 122946, 142245, 145957, 169062, 179426, 14110], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=doi<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"doi\", \"line\": {\"color\": \"#FF97FF\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"doi\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [546, 581, 767, 1194, 1242, 1007, 945, 1046, 806, 1570, 1571, 2132, 2098, 797, 2164, 1343, 3212, 1922, 2754, 3035, 3949, 7707, 7221, 29201, 21903, 53324, 63184, 26189, 22031, 21000, 33714, 38336, 56741, 145521, 125268, 122948, 142245, 145958, 169061, 178739, 14092], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=figshare_url<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"figshare_url\", \"line\": {\"color\": \"#FECB52\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"figshare_url\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [546, 581, 767, 1194, 1242, 1007, 945, 1046, 806, 1570, 1571, 2132, 2098, 797, 2164, 1343, 3212, 1922, 2754, 3035, 3949, 7707, 7221, 29201, 21903, 53324, 63184, 26190, 22035, 21000, 33715, 38337, 56741, 145523, 125270, 122949, 142245, 145959, 169063, 179426, 14110], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=funder_countries<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"funder_countries\", \"line\": {\"color\": \"#636efa\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"funder_countries\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12, 95, 23, 78, 119, 118, 192, 361, 352, 608, 1187, 1896, 3813, 5684, 8444, 12945, 26050, 80069, 71290, 68823, 68939, 70094, 75686, 67687, 153], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=funders<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"funders\", \"line\": {\"color\": \"#EF553B\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"funders\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12, 95, 23, 78, 119, 118, 192, 361, 352, 608, 1187, 1896, 3813, 5684, 8444, 12945, 26050, 80069, 71290, 68823, 68939, 70094, 75686, 67687, 153], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=id<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"id\", \"line\": {\"color\": \"#00cc96\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"id\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [546, 581, 767, 1194, 1242, 1007, 945, 1046, 806, 1570, 1571, 2132, 2098, 797, 2164, 1343, 3212, 1922, 2754, 3035, 3949, 7707, 7221, 29201, 21903, 53324, 63184, 26190, 22035, 21000, 33715, 38337, 56741, 145523, 125270, 122949, 142245, 145959, 169063, 179426, 14110], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=journal<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"journal\", \"line\": {\"color\": \"#ab63fa\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"journal\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [25, 19, 30, 23, 28, 26, 38, 36, 32, 36, 26, 48, 62, 57, 66, 63, 1024, 613, 768, 849, 1193, 1424, 1989, 2990, 4390, 6061, 7914, 8305, 12718, 16536, 21588, 32250, 47225, 128480, 100701, 97395, 99174, 102294, 122549, 119830, 737], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=keywords<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"keywords\", \"line\": {\"color\": \"#FFA15A\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"keywords\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [546, 581, 767, 1194, 1242, 1007, 945, 1046, 806, 1570, 1571, 2132, 2098, 797, 2164, 1343, 3212, 1922, 2754, 3035, 3949, 7707, 7221, 29201, 21903, 53324, 63178, 26181, 22029, 20987, 33702, 38299, 56703, 143968, 125223, 122948, 142245, 145959, 169062, 179426, 14110], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=language_desc<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"language_desc\", \"line\": {\"color\": \"#19d3f3\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"language_desc\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [546, 581, 767, 1194, 1242, 1007, 945, 1046, 806, 1570, 1571, 2132, 2098, 797, 2164, 1343, 3212, 1922, 2754, 3035, 3949, 7707, 7221, 29201, 21903, 53324, 63184, 26190, 22035, 21000, 33715, 38337, 56741, 145508, 125268, 122948, 142245, 145959, 169057, 179426, 14109], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=language_title<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"language_title\", \"line\": {\"color\": \"#FF6692\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"language_title\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [546, 581, 767, 1194, 1242, 1007, 945, 1046, 806, 1570, 1571, 2132, 2098, 797, 2164, 1343, 3212, 1922, 2754, 3035, 3949, 7707, 7221, 29201, 21903, 53324, 63184, 26190, 22035, 21000, 33715, 38337, 56741, 145508, 125268, 122948, 142245, 145959, 169057, 179426, 14109], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=license<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"license\", \"line\": {\"color\": \"#B6E880\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"license\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [546, 581, 767, 1194, 1242, 1007, 945, 1046, 806, 1570, 1571, 2132, 2098, 797, 2164, 1343, 3212, 1922, 2754, 3035, 3949, 7707, 7221, 29201, 21903, 53324, 63184, 26190, 22035, 21000, 33715, 38337, 56741, 145523, 125270, 122949, 142245, 145959, 169063, 179426, 14110], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=publication_ids<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"publication_ids\", \"line\": {\"color\": \"#FF97FF\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"publication_ids\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [24, 28, 38, 27, 30, 83, 91, 41, 47, 56, 30, 104, 100, 63, 108, 70, 105, 75, 131, 161, 147, 199, 234, 191, 213, 235, 376, 613, 561, 567, 830, 763, 883, 978, 820, 765, 872, 1365, 14341, 17549, 0], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=repository_id<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"repository_id\", \"line\": {\"color\": \"#FECB52\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"repository_id\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [546, 581, 767, 1194, 1242, 1007, 945, 1046, 806, 1570, 1571, 2132, 2098, 797, 2164, 1343, 3212, 1922, 2754, 3035, 3949, 7707, 7221, 29201, 21903, 53324, 63184, 26190, 22035, 21000, 33715, 38337, 56741, 145523, 125270, 122949, 142245, 145959, 169063, 179425, 14109], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=research_org_cities<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"research_org_cities\", \"line\": {\"color\": \"#636efa\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"research_org_cities\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [18, 16, 27, 19, 23, 22, 25, 26, 17, 24, 14, 32, 47, 38, 41, 39, 111, 247, 237, 289, 638, 1000, 1410, 2346, 3083, 4343, 5837, 7168, 10401, 14091, 19440, 30031, 46049, 125642, 97749, 94338, 95936, 99616, 118983, 113819, 459], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=research_org_countries<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"research_org_countries\", \"line\": {\"color\": \"#EF553B\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"research_org_countries\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [18, 16, 27, 19, 23, 22, 26, 26, 17, 24, 14, 32, 47, 38, 41, 39, 111, 247, 237, 289, 638, 1000, 1411, 2347, 3083, 4343, 5837, 7169, 10403, 14091, 19450, 30037, 46054, 125673, 97782, 94396, 95988, 99708, 119079, 113924, 460], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=research_org_states<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"research_org_states\", \"line\": {\"color\": \"#00cc96\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"research_org_states\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [13, 13, 21, 14, 19, 17, 17, 17, 12, 14, 9, 20, 27, 21, 18, 22, 63, 152, 133, 165, 309, 534, 645, 1088, 1361, 2003, 2711, 3518, 5402, 7586, 10559, 14810, 21315, 53599, 37789, 36700, 36327, 35979, 41689, 39391, 94], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=research_orgs<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"research_orgs\", \"line\": {\"color\": \"#ab63fa\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"research_orgs\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [21, 17, 29, 23, 27, 25, 33, 28, 22, 25, 14, 32, 48, 43, 44, 43, 139, 291, 326, 362, 671, 1070, 1542, 2448, 3259, 4621, 6106, 7443, 10703, 14580, 19962, 30635, 47152, 128362, 99940, 96625, 98402, 102110, 121501, 116432, 475], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=researchers<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"researchers\", \"line\": {\"color\": \"#FFA15A\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"researchers\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [24, 17, 26, 22, 23, 24, 31, 29, 29, 32, 24, 46, 60, 50, 62, 57, 910, 584, 717, 809, 1144, 1346, 1949, 2936, 4211, 5838, 7642, 8075, 12427, 16244, 21295, 32043, 47122, 128136, 100033, 96872, 98694, 101674, 121151, 109797, 492], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=title<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"title\", \"line\": {\"color\": \"#19d3f3\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"title\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [546, 581, 767, 1194, 1242, 1007, 945, 1046, 806, 1570, 1571, 2132, 2098, 797, 2164, 1343, 3212, 1922, 2754, 3035, 3949, 7707, 7221, 29201, 21903, 53324, 63184, 26190, 22035, 21000, 33715, 38337, 56741, 145523, 125270, 122949, 142245, 145959, 169063, 179426, 14110], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"segment=year<br>year=%{x}<br>count=%{y}\", \"legendgroup\": \"year\", \"line\": {\"color\": \"#FF6692\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"year\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020], \"xaxis\": \"x\", \"y\": [546, 581, 767, 1194, 1242, 1007, 945, 1046, 806, 1570, 1571, 2132, 2098, 797, 2164, 1343, 3212, 1922, 2754, 3035, 3949, 7707, 7221, 29201, 21903, 53324, 63184, 26190, 22035, 21000, 33715, 38337, 56741, 145523, 125270, 122949, 142245, 145959, 169063, 179426, 14110], \"yaxis\": \"y\"}],\n",
       "                        {\"legend\": {\"title\": {\"text\": \"segment\"}, \"tracegroupgap\": 0}, \"margin\": {\"t\": 60}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"year\"}}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"count\"}}},\n",
       "                        {\"responsive\": true}\n",
       "                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('d8983c9c-6420-4b06-a745-ee1defa30e3e');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })\n",
       "                };\n",
       "                });\n",
       "            </script>\n",
       "        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "start_year = 1980\n",
    "\n",
    "# need to sort otherwise the chart is messed up!\n",
    "temp = seed.query(f\"year >= {start_year}\").sort_values([\"segment\", \"year\"]) \n",
    "# \n",
    "fig2 = px.line(temp, x=\"year\", y=\"count\", color=\"segment\")\n",
    "plot(fig2, filename=\"datasets-fields-distribution.html\")\n",
    "fig2.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "v1-1.21-qa.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
